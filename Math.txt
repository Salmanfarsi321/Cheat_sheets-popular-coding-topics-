
------------------------------------------------------------------------------Maths-----------------------------------------------------------------------------------


(1) Prime sum

Given an even number ( greater than 2 ), return two prime numbers whose sum will be equal to given number.

//O(N)
void sieve(int A,vector<bool>& prime){
    prime[0] = false;
    prime[1] = false;
    for(int i=2;i*i<=A;i++){
        if(prime[i] == true){
            for(int j=i*i;j<=A;j+=i){
                prime[j] = false;
            }
        }
    }
}
 
vector<int> Solution::primesum(int A) {
    vector<int>ans;
    vector<bool>prime(A+1,true);
    sieve(A,prime);
    for(int i=2;i<=A/2;i++){
        if(prime[i] && prime[A-i]){
            ans.push_back(i);
            ans.push_back(A-i);
            break;
        }
    }
    return ans;
}

//O(N*sqrt(N))
bool prime(int n){
    int cnt = 0;
    for(int i=1;i*i<=n;i++){
        if(n%i == 0){
            if(i * i == n)  cnt++;
            else
            cnt +=2;
        }
    }
    if(cnt == 2) return true;
    return false;
}

vector<int> Solution::primesum(int A) {
    vector<int>ans;
    for(int i=2;i<=A/2;i++){
        if(prime(i) && prime(A-i) ){
            ans.push_back(i);
            ans.push_back(A-i);
            break;
        }
    }
    return ans;
}


(2) Sum of pairwise hamming distance

Hamming distance between two non-negative integers is defined as the number of positions at which the corresponding bits are different.

Given an array A of N non-negative integers, find the sum of hamming distances of all pairs of integers in the array. Return the answer modulo 1000000007

int Solution::hammingDistance(const vector<int> &A) {
    long long int ans=0,n=A.size();
    long long int count;
    for(int i=0;i<31;i++){
        count=0;
        for(int j=0;j<n;j++){
            if(A[j]&(1<<i))
             count++;
        }
        ans=(ans+count*(n-count)*2)%1000000007;
    }
    return ans;
}


(3) Fizzbuzz

Given a positive integer A, return an array of strings with all the integers from 1 to N.
But for multiples of 3 the array should have “Fizz” instead of the number.
For the multiples of 5, the array should have “Buzz” instead of the number.
For numbers which are multiple of 3 and 5 both, the array should have “FizzBuzz” instead of the number.

Look at the example for more details.

Example

A = 5
Return: [1 2 Fizz 4 Buzz]

vector<string> Solution::fizzBuzz(int A) {
    vector<string>ans;
    for(int i=1;i<=A;i++){
        if(i%3==0 && i%5==0)
        ans.push_back("FizzBuzz");
        else if(i%3==0)
        ans.push_back("Fizz");
        else if(i%5==0)
        ans.push_back("Buzz");
        else
        ans.push_back(to_string(i));
    }
    return ans;
}


(4) Power of two integers

Given a positive integer which fits in a 32 bit signed integer, find if it can be expressed as A^P where P > 1 and A > 0. A and P both should be integers.
Example

Input : 4
Output : True  
as 2^2 = 4

int Solution::isPower(int A) {
    if(A==1) return 1;
    for(int i=2;i*i<=A;i++){
        double c=log(A)/log(i);
        if(pow(i,c)==A)
        return 1;
    }
    return 0;
}


(5) Excel column number

Given a column title A as appears in an Excel sheet, return its corresponding column number.

A  -> 1
B -> 2
C -> 3
...
Z -> 26
AA -> 27
AB -> 28 

int Solution::titleToNumber(string A) 
{
    int ans=0;
    int n=A.size();
    int i;
    for(i=n-1;i>=0;i--)
    ans+=pow(26,(n-(i+1)))*(A[i]-'A'+1);
   return ans;
}

(6) Palindrome integer

Determine whether an integer is a palindrome. Do this without extra space.

A palindrome integer is an integer x for which reverse(x) = x where reverse(x) is x with its digit reversed.
Negative numbers are not palindromic.

Example :

Input : 12121
Output : True

Input : 123
Output : False

int reverse(int A){
    int val = 0;
    while(A > 0){
        val = val*10+A%10;
        A/=10;
    }
    return val;
}

int Solution::isPalindrome(int A) {
    return A == reverse(A);
}

(7) Reverse integer

Reverse digits of an integer.

Example1:

x = 123,

return 321
Example2:

x = -123,

return -321

Return 0 if the result overflows and does not fit in a 32 bit signed integer

int Solution::reverse(int n) {
     long long res=0;
    while(n){
        res=res*10+n%10;
        if(res>INT_MAX||res<INT_MIN) return 0;
        n=n/10;
    }
    return res;
}

(8)
