-------------------------------------------------------------------------------Heap-----------------------------------------------------------------------------

Que1:Magician and chocolates
/*Given N bags, each bag contains Bi chocolates. There is a kid and a magician. In one unit of time, kid chooses a random bag i,
 eats Bi chocolates, then the magician fills the ith bag with floor(Bi/2) chocolates.*/

Find the maximum number of chocolates that kid can eat in A units of time.

const int mod=1e9+7;

int Solution::nchoc(int A, vector<int> &B) {
    priority_queue<int>pq;
    for(int i=0;i<B.size();i++){
        pq.push(B[i]);
    }
    long long ans=0;
    while(!pq.empty() && A--){
        long long x=pq.top();
        pq.pop();
        ans=(ans+x)%mod;
        pq.push(x/2);
    }
    return (int)ans;
}

Que2:K largest elements

#include<bits/stdc++.h>
using namespace std;
int main()
{
	int t;
	cin>>t;
	while(t--){
	    int n,k;
	    cin>>n>>k;
	    vector<int>a(n);
	    priority_queue<int,vector<int>,greater<int> >pq;
	    for(int i=0;i<n;i++){
	        cin>>a[i];
	    }
	    for(int i=0;i<n;i++){
	        pq.push(a[i]);
	        if(pq.size()>k)
	        pq.pop();
	    }
	    vector<int>ans;
	    while(!pq.empty()){
	        ans.push_back(pq.top());
	        pq.pop();
	    }
	    reverse(ans.begin(),ans.end());
	    for(int i=0;i<ans.size();i++) cout<<ans[i]<<" ";
	    cout<<"\n";
	}
	return 0;
}

Que3: Nearly sorted array

#include<bits/stdc++.h>
using namespace std;
int main()
{
	int t;
	cin>>t;
	while(t--){
	    int n,k;
	    cin>>n>>k;
	    vector<int>a(n);
	    for(int i=0;i<n;i++) cin>>a[i];
	    priority_queue<int,vector<int>,greater<int> >pq;
	    for(int i=0;i<n;i++){
	        pq.push(a[i]);
	        if(pq.size()>k){
	            cout<<pq.top()<<" ";
	            pq.pop();
	        }
	    }
	    while(!pq.empty()){
	        cout<<pq.top()<<" ";
	        pq.pop();
	    }
	    cout<<"\n";
	}
	return 0;
}

Que4: Minimum cost of ropes

#include<bits/stdc++.h>
using namespace std;
#define ll long long

int main()
{
	int t;
	cin>>t;
	while(t--){
	    int n;
	    cin>>n;
	    priority_queue<int,vector<int>,greater<int> >pq;
	    for(int i=0;i<n;i++) {
	        int ele;
	        cin>>ele;
	        pq.push(ele);
	    }
	    ll min_cost=0;
	    while(pq.size()>1){
	        int x=pq.top();
	        pq.pop();
	        int y=pq.top();
	        pq.pop();
	        min_cost+=x+y;
	        pq.push(x+y);
	    }
	    cout<<min_cost<<"\n";
	}
	return 0;
}

Que5: Maximum sum combinations

class  pairhash {  // amateurish hash function for pair of integers
public:
    size_t operator()(const pair<int,int>& p) const {
        return hash<int>()(p.first) ^ hash<int>()(p.second);
    }
};

vector<int> Solution::solve(vector<int> &A, vector<int> &B, int k) {
    vector<int>ans;
    int n = A.size();
    sort(A.begin(),A.end());
    sort(B.begin(),B.end());
    int i=n-1,j=n-1;
    priority_queue<pair<int,pair<int,int> >>pq;
    unordered_set<pair<int,int>,pairhash >set;
    pq.push({A[i]+A[j],{i,j}});
    while(!pq.empty()){
        ans.push_back(pq.top().first);
        if(ans.size() == k) break;
        int x = pq.top().second.first;
        int y = pq.top().second.second;
        pq.pop();
        if(x>=0 && set.find({x-1,y}) == set.end()){
            pq.push({A[x-1]+A[y],{x-1,y}});
            set.insert({x-1,y});
        }
        if(y>=0 && set.find({x,y-1}) == set.end()){
            pq.push({A[x]+A[y-1],{x,y-1}});
            set.insert({x,y-1});
        }
    }
    return ans;
}
