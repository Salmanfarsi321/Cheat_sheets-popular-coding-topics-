
-------------------------------------------------------------------------Two_pointers-----------------------------------------------------------------------

1) Merge two sorted lists 2 (nice approach without using extra space)

void Solution::merge(vector<int> &A, vector<int> &B)
{
    
    // O(1) space
    // If all elements of B are placed in array
    // then elements of A are already in place
    
    int i = A.size() - 1; // i pointing to last index of A
    int j = B.size() - 1; // j pointing to last index of B
    
    int lastPos = A.size() + B.size() - 1; // lastPos pointing to last index of merged array A and B
    
    A.resize(A.size() + B.size());
    
    while(j >= 0)
    {
        if(i >= 0 and A[i] > B[j])
            A[lastPos--] = A[i--];
        else
            A[lastPos--] = B[j--];
    }
    
}


2) Intersection of sorted arrays

/*Find the intersection of two sorted arrays.
OR in other words,
Given 2 sorted arrays, find all the elements which occur in both the arrays.

Example :

Input : 
    A : [1 2 3 3 4 5 6]
    B : [3 3 5]

Output : [3 3 5]
*/

vector<int> Solution::intersect(const vector<int> &A, const vector<int> &B) {
    int i=0,j=0;
    vector<int>ans;
    int n=A.size(),m=B.size();
    while(i<n  && j<m){
        if(A[i] == B[j]){
            ans.push_back(A[i]);
            i++;
            j++;
        }
        else if(A[i] < B[j]){
            i++;
        }
        else
        j++;
    }
    return ans;
}


3) 3 sum 

/*Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target.
Return the sum of the three integers.
Assume that there will only be one solution
Example:
given array S = {-1 2 1 -4},
and target = 1.
The sum that is closest to the target is 2. (-1 + 2 + 1 = 2 )
*/

int Solution::threeSumClosest(vector<int> &A, int B) {
     if(A.size() < 3){
        return 0;
    }
     
    sort(A.begin(), A.end());
    
    int i = 0;
    int sum, minDiff = INT_MAX;
    
    while(i < A.size()-2){
        int left = i+1;
        int right = A.size()-1;
        while(left < right){
            int temp = A[i]+A[left]+A[right];
            int diff = abs(temp-B);
            if(diff == 0){
                return B;
            }
            if(diff < minDiff){
                minDiff = diff;
                sum = temp;
            }
            if(temp < B){
                left++; 
            }
            else{
                right--;
            }
        }
        i++;
    }
    
    return sum;
}


4) 3 sum zero

#define ll long long

vector<vector<int> > Solution::threeSum(vector<int> &A) {
   vector<vector<int>> result;
    vector<int>& a = A;
    sort(a.begin(), a.end());
    int size = a.size();
    for(int i = 0; i < size - 2; i++) {
        // Skip duplicates of first number
        if(i > 0 && a[i] == a[i - 1])
            continue;
            
        ll first = a[i];
        ll left = i + 1;
        ll right = size - 1;
        while(left < right) {
            ll second = a[left];
            ll third = a[right];
            ll sum = first + second + third;
            if(sum == 0) {
                result.push_back({first, second, third});
                // Skip duplicates of second number
                while(left < right && a[left] == second)
                    left++;
                // Skip duplicates of third number
                while(left < right && a[right] == third)
                    right--;
            }
            else if(sum < 0) {
                left++;
            }
            else {
                right--;
            }
        }
    }
    
    return result;
}

5) Counting triangles

const int mod = 1e9+7;
 
int Solution::nTriang(vector<int> &A) {
    int n = A.size();
    if(n<3) return 0;
    sort(A.begin(),A.end());
    long long cnt = 0; 
    for(int i=n-1;i>=0;i--){
        int left = 0;
        int right = i - 1;
        while(left < right){
            if(A[left] + A[right] > A[i]){
                cnt = (cnt + right - left)%mod;
                right--;
            }
            else
            left++;
        }
    }
    long long ans = cnt % mod;
    if(ans < 0) ans += mod;
    return ans;
}

6) Diffk

int Solution::diffPossible(vector<int> &A, int k) {
    int n=A.size();
    int i=0,j=1;
    if(n<=1) return 0;
    while(i<n && j<n ){
        if(i!=j && A[j] - A[i] == k){
            return 1;
        }
        else if(A[j] - A[i] < k){
            j++;
        }
        else
        i++;
    }
    return 0;
}


7) Remove duplicates from sorted array 1

int Solution::removeDuplicates(vector<int> &A) {
        int i=0,j=0;
        int n=A.size();
        for(i=0;i<n;i++){
            while(i+1<n && A[i] == A[i+1]){
                i++;
            }
            A[j] = A[i];
            j++;
        }
        return j;
}

8) Remove duplicates from sorted array 2

int Solution::removeDuplicates(vector<int> &A) {
    int n = A.size();
    int i=0,j=0;
    while(i < n){
        bool flag = false;
        while(i+1<n && A[i] == A[i+1]){
            flag = true;
            i++;
        }
        if(flag == true){
            A[j] = A[i];
            j++;
            A[j] = A[i];
            j++;
        }
        else{
            A[j] = A[i];
            j++;
        }
        i++;
    }
    return j;
}

9) Remove element from array
/*Given an array and a value, remove all the instances of that value in the array.
Also return the number of elements left in the array after the operation.
It does not matter what is left beyond the expected length.

If array A is [4, 1, 1, 2, 1, 3]
and value elem is 1,
then new length is 3, and A is now [4, 2, 3] 
*/

int Solution::removeElement(vector<int> &A, int B) {
    int i=0,j=0;
    int cnt=0;
    while(i < A.size()){
        if(A[i] == B){
            i++;
            cnt++;
        }
        else{
            A[j] = A[i];
            i++;
            j++;
        }
    }
    return A.size() - cnt;
}


10) sort by color

/*Given an array with n objects colored red, white or blue,
sort them so that objects of the same color are adjacent, with the colors in the order red, white and blue.
Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively*/

void Solution::sortColors(vector<int> &A) {
   int n = A.size();
   int left=0,mid=0,right=n-1;
   while(mid <= right){
       if(A[mid] == 0){
           swap(A[mid],A[left]);
           left++;
           mid++;
       }
       else if(A[mid] == 2){
           swap(A[mid],A[right]);
           right--;
       }
       else
       mid++;
   }
}


11) Maximum continous series of ones (good question on two pointers (sliding window concept) to test your skills)

/*You are given with an array of 1s and 0s. And you are given with an integer M, which signifies number of flips allowed.
Find the position of zeros which when flipped will produce maximum continuous series of 1s.
For this problem, return the indices of maximum continuous series of 1s in order.
Input : 
Array = {1 1 0 1 1 0 0 1 1 1 } 
M = 1

Output : 
[0, 1, 2, 3, 4] */

vector<int> Solution::maxone(vector<int> &A, int B) {
    vector<int>ans;
    int i=0,j=0,start=0,zeros=0,mx_len=0;
    while(i < A.size()){
        if(A[i] == 0){
            zeros++;
        while(j<A.size() && zeros > B){		//reduce the window size by incrementing j if number of zeros exceed the permissible value of zeros
            if(A[j] == 0) zeros--;
            j++;
        }
        }
        if((i-j+1) > mx_len){
            mx_len = i-j+1;
            start = j;
        }
        i++;
    }
    for(int k=start;k<start + mx_len;k++)
    ans.push_back(k);
    return ans;
}




12) Array 3 pointers

int minimize(const vector<int> &a, const vector<int> &b, const vector<int> &c) {
        int diff = INT_MAX;
        int minimum = INT_MAX;
        int maximum = INT_MIN;
        int i, j, k;
        for(i = 0, j = 0, k = 0; i < a.size() && j < b.size() && k < c.size();) {
            minimum = min(a[i], min(b[j], c[k]));
            maximum = max(a[i], max(b[j], c[k]));
            diff = min(diff, max - min);
            if (diff == 0) break;
            if (a[i] == minimum) i++;
            else if (b[j] == minimum) j++;
            else k++;
        }
        return diff;
    }

13) Container with most water (Beware : Trapping rain water looks similar to this but they are not)
/*solution explanation(must read) : Description of approach 1:

Note 1: When you consider a1 and aN, then the area is (N-1) * min(a1, aN).
Note 2: The base (N-1) is the maximum possible.
This implies that if there was a better solution possible, it will definitely have height greater than min(a1, aN).

B * H > (N-1) * min(a1, aN)
We know that, B < (N-1)
So, H > min(a1, aN)

This means that we can discard min(a1, aN) from our set and look to solve this problem again from the start.
If a1 < aN, then the problem reduces to solving the same thing for a2, aN.
Else, it reduces to solving the same thing for a1, aN-1 */


int Solution::maxArea(vector<int> &height) {
    int i=0,j=height.size()-1;
        int res = 0;
        while(i < j){
            res = max(res,min(height[i],height[j])*(j-i));
            if(height[i] < height[j]){      
                i++;
            }
            else
                j--;
        }
        return res;
}

