----------------------------------------------------------------Dynamic programming--------------------------------------------------------------------------------
Que1:Longest palindromic substring

string longestPalindrome(string s){
        int n=s.size();
        int maxlen=1,start=0;
        for(int i=1;i<n;i++){
            int lo=i-1,hi=i;
            while(lo>=0 && hi<n && s[lo]==s[hi]){
                if(hi-lo+1>maxlen){
                    maxlen=hi-lo+1;
                    start=lo;
                }
                lo--;
                hi++;
            }
        }  
        int odd_ans=0;
        for(int i=1;i<n;i++){
            int lo=i-1,hi=i+1;
            while(lo>=0 && hi<n && s[lo]==s[hi]){
                if(hi-lo+1>maxlen){
                    maxlen=hi-lo+1;
                    start=lo;
                }
                lo--;
                hi++;
            }
        }
        return s.substr(start,maxlen);
 }

Que2:Longest increasing subsequence O(n logn)

int len(vector<int>a){
	if(a.size()==0)
	return 0;
	vector<int> v;
	v.push_back(a[0]);
	for(int i=1;i<a.size();i++)
	{
		if(a[i]>v.back())
		v.push_back(a[i]);
		else if(a[i]<v.back())
		{
			if(!binary_search(v.begin(),v.end(),a[i]))
			{
				int temp=upper_bound(v.begin(),v.end(),a[i])-v.begin();
				v[temp]=a[i];		
			}
		}
	}
	return v.size();
}

Que3:Wildcard matching

 bool isMatch(string s, string p) 
    {
        int n=s.size(),m=p.size();
        vector<vector<bool> >dp(n+1,vector<bool>(m+1));
	//dp[i][j] represents whether substring s[0...i] and p[0...j] matches or not
        dp[0][0]=true;
        for(int i=1;i<=n;i++)	
            dp[i][0]=false;		// if pattern length is ""
        for(int j=1;j<=m;j++){
            if(p[j-1]=='*')		//if s is "" and pattern is like ******* ,then also it will be true
            dp[0][j]=dp[0][j-1];	
            else
            dp[0][j]=false;		//if s is "" and pattern is like a****,then it will be false 
        }
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(p[j-1]=='?' || s[i-1]==p[j-1])
                    dp[i][j]=dp[i-1][j-1];
                else if(p[j-1]=='*')
                    dp[i][j]=dp[i-1][j] || dp[i][j-1];
                else
                    dp[i][j]=false;	// if p[j-1]!=s[i-1]
            }
        }
        return dp[n][m];
    }

Que4:Regular expression matching

1, If p.charAt(j) == s.charAt(i) :  dp[i][j] = dp[i-1][j-1];
2, If p.charAt(j) == '.' : dp[i][j] = dp[i-1][j-1];
3, If p.charAt(j) == '*': 
   here are two sub conditions:
               1   if p.charAt(j-1) != s.charAt(i) : dp[i][j] = dp[i][j-2]  //in this case, a* only counts as empty
               2   if p.charAt(i-1) == s.charAt(i) or p.charAt(i-1) == '.':
                              dp[i][j] = dp[i-1][j]    //in this case, a* counts as multiple a 
                           or dp[i][j] = dp[i][j-1]   // in this case, a* counts as single a
                           or dp[i][j] = dp[i][j-2]   // in this case, a* counts as empty

 public boolean isMatch(String s, String p) {
        if(s == null || p == null) {
            return false;
        }
        boolean[][] state = new boolean[s.length() + 1][p.length() + 1];
        state[0][0] = true;
        // no need to initialize state[i][0] as false
        // initialize state[0][j]
        for (int j = 1; j < state[0].length; j++) {
            if (p.charAt(j - 1) == '*') {
                if (state[0][j - 1] || (j > 1 && state[0][j - 2])) {
                    state[0][j] = true;
                }
            } 
        }
        for (int i = 1; i < state.length; i++) {
            for (int j = 1; j < state[0].length; j++) {
                if (s.charAt(i - 1) == p.charAt(j - 1) || p.charAt(j - 1) == '.') {
                    state[i][j] = state[i - 1][j - 1];
                }
                if (p.charAt(j - 1) == '*') {
                    if (s.charAt(i - 1) != p.charAt(j - 2) && p.charAt(j - 2) != '.') {
                        state[i][j] = state[i][j - 2];
                    } else {
                        state[i][j] = state[i - 1][j] || state[i][j - 1] || state[i][j - 2];
                    }
                }
            }
        }
        return state[s.length()][p.length()];
    }

Que5:Longest valid parenthesis

int longestValidParentheses(string s) 
    {
        int n=s.size();
        stack<int>stk;
        int mx=0;
        stk.push(-1);
        for(int i=0;i<n;i++)
        {
            if(s[i]=='(')
                stk.push(i);
            else
            {
                stk.pop();
                if(stk.empty())
                    stk.push(i);
                else
                {
                    mx=max(mx,i-stk.top());
                }
            }
        }
        return mx;
    }

Que6:Edit distance (find the minimum number of operations required to convert word1 to word2)

 int minDistance(string str1, string str2)
    {
        int n=str1.size();
        int m=str2.size();
	int dp[n+1][m+1];
	for(int i=0;i<=n;i++)
	{
	    for(int j=0;j<=m;j++)
	    {
	            if(i==0) dp[i][j]=j;
	            else if(j==0) dp[i][j]=i;
	            else if(str1[i-1]==str2[j-1])
	            dp[i][j]=dp[i-1][j-1];
	            else
	            dp[i][j]=1+min({dp[i-1][j],dp[i][j-1],dp[i-1][j-1]});
	     }
	 }
	    return dp[n][m];
    }


Que7:Minimum path sum

Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

int minPathSum(vector<vector<int>>& grid)
    {
        int n=grid.size();
        int m=grid[0].size();
        int dp[n][m];
        memset(dp,0,sizeof(dp));
        dp[0][0]=grid[0][0];
        for(int i=1;i<n;i++)
        dp[i][0]=dp[i-1][0]+grid[i][0];
        for(int i=1;i<m;i++)
        dp[0][i]=dp[0][i-1]+grid[0][i];
        for(int i=1;i<n;i++)
        {
            for(int j=1;j<m;j++)
            {
                dp[i][j]=grid[i][j]+min(dp[i-1][j],dp[i][j-1]);
            }
        }
        return dp[n-1][m-1];
    }   

Que8: Unique paths

A robot is located at the top-left corner of a m x n grid .
The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid 
Now consider if some obstacles are added to the grids. How many unique paths would there be? obstacle->1 , free space->0

int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) 
    {
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();
        long dp[m][n];
        memset(dp,0,sizeof(dp));
        if(obstacleGrid[0][0]==1)
            return 0;
        for(int i=0;i<n;i++)
        {
            if(obstacleGrid[0][i]==1)
            break;
            else
            dp[0][i]=1;
        }
        for(int j=0;j<m;j++)
        {
            if(obstacleGrid[j][0]==1)
            break;
            else
            dp[j][0]=1;
        }
        for(int i=1;i<m;i++)
        {
            for(int j=1;j<n;j++)
            {
                if(obstacleGrid[i][j]==0)
                    dp[i][j]=dp[i-1][j]+dp[i][j-1];
                else
                    dp[i][j]=0;
            }
        }
        return dp[m-1][n-1];
    }


Que9: Climbing stairs 

You are climbing a stair case. It takes n steps to reach to the top.
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 int climbStairs(int n) 
    {
        int dp[n+1];
        memset(dp,0,sizeof(dp));
        dp[1]=1;
        if(n>1)
        {
        dp[2]=2;
        for(int i=3;i<=n;i++)
            dp[i]=dp[i-1]+dp[i-2];
        }
        return dp[n];
    }

Que10: Maximal rectangle 	(Very important)

int max_area_histogram(vector<int>v){
    stack<pair<int,int> >stk;
    int n=v.size();
    vector<int>left;
    vector<int>right;
    //next smaller element left
    for(int i=0;i<v.size();i++){
        while(!stk.empty() && stk.top().first>=v[i])
        stk.pop();
        if(stk.empty())
        left.push_back(-1);
        else
        left.push_back(stk.top().second);
        stk.push({v[i],i});
    }
    while(!stk.empty()) stk.pop();
    //next smaller element right
    for(int i=n-1;i>=0;i--){
        while(!stk.empty() && stk.top().first>=v[i])
        stk.pop();
        if(stk.empty()) right.push_back(n);
        else
        right.push_back(stk.top().second);
        stk.push({v[i],i});
    }
    reverse(right.begin(),right.end());
    int mx=0;
    for(int i=0;i<n;i++){
        int val=(right[i]-left[i]-1)*v[i];
        mx=max(mx,val);
    }
    return mx;
}
public:
    int maximalRectangle(vector<vector<char>>& M) {
    int ans=0;
    int n=M.size();
    if(n==0) return 0;
    int m=M[0].size();
    vector<int>v(m,0);
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(M[i][j]=='0')
            v[j]=0;
            else
            v[j]+=M[i][j]-'0';
        }
        ans=max(ans,max_area_histogram(v));
    }
    return ans;
    }


Que 11: Maximal square

int max_area_histogram(vector<int>v){
    stack<pair<int,int> >stk;
    int n=v.size();
    vector<int>left;
    vector<int>right;
    //next smaller element left
    for(int i=0;i<v.size();i++){
        while(!stk.empty() && stk.top().first>=v[i])
        stk.pop();
        if(stk.empty())
        left.push_back(-1);
        else
        left.push_back(stk.top().second);
        stk.push({v[i],i});
    }
    while(!stk.empty()) stk.pop();
    //next smaller element right
    for(int i=n-1;i>=0;i--){
        while(!stk.empty() && stk.top().first>=v[i])
        stk.pop();
        if(stk.empty()) right.push_back(n);
        else
        right.push_back(stk.top().second);
        stk.push({v[i],i});
    }
    reverse(right.begin(),right.end());
    int mx=0;
    for(int i=0;i<n;i++){
        int width=(right[i]-left[i]-1);
	int height=v[i];
	int side=min(width,height);
        mx=max(mx,side*side);
    }
    return mx;
}
public:
    int maximalSquare(vector<vector<char>>& M) {
    int ans=0;
    int n=M.size();
    if(n==0) return 0;
    int m=M[0].size();
    vector<int>v(m,0);
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(M[i][j]=='0')
            v[j]=0;
            else
            v[j]+=M[i][j]-'0';
        }
        ans=max(ans,max_area_histogram(v));
    }
    return ans;
    }

Que 12: Scramble string

bool isScramble(string s1, string s2) {
        if(s1==s2)
            return true;
        int count[26] = {0};
        int n=s1.size();
        for(int i=0; i<n; i++)
        {
            count[s1[i]-'a']++;
            count[s2[i]-'a']--;
        } 
        for(int i=0; i<26; i++)
        {
            if(count[i]!=0)
                return false;
        }
        bool flag=false;
        for(int i=1;i<=n-1;i++){
            bool cond1=isScramble(s1.substr(0,i),s2.substr(n-i,i)) &&
                       isScramble(s1.substr(i,n-i),s2.substr(0,n-i));
            bool cond2=isScramble(s1.substr(0,i),s2.substr(0,i)) && 
                       isScramble(s1.substr(i,n-i),s2.substr(i,n-i));
            if(cond1 || cond2){
                flag=true;
                break;
            }
        }
       return flag; 
    }

Que13: Maximum product subarray

 int maxProduct(vector<int>& a)
    {
        
        int n=a.size();
        int curr_max_product=a[0];
        int curr_min_product=a[0];
        int prev_max_product=a[0];
        int prev_min_product=a[0];
        int ans=a[0];
        for(int i=1;i<n;i++)
        {
	   //three choices either the current element is positive,negative or we want to start a new subarray starting with the current element
	   curr_max_product=max(prev_max_product*a[i],max(prev_min_product*a[i],a[i]));
           curr_min_product=min(prev_max_product*a[i],min(prev_min_product*a[i],a[i]));
           ans=max(ans,curr_max_product);
           prev_max_product=curr_max_product;
           prev_min_product=curr_min_product;
        }
        return ans;
    }

Que14: Dungeon game	(very important)

int calculateMinimumHP(vector<vector<int>>& mat) 
    {
        int n=mat.size();
        int m=mat[0].size();
        int dp[n+1][m+1];
        for(int i=0;i<=n;i++)
        {
            dp[i][m]=INT_MAX;
        }
        for(int i=0;i<=m;i++)
        {
            dp[n][i]=INT_MAX;
        }
        dp[n-1][m]=0,dp[n][m-1]=0;
        for(int i=n-1;i>=0;i--)
        {
            for(int j=m-1;j>=0;j--)
            {
		//if need becomes less than 0 it means the value at matrix[i][j] is positive and we need 0 health there,hence dp[i][j]=0
                dp[i][j]=max(min(dp[i+1][j],dp[i][j+1])-mat[i][j],0);		
            }
        }
        return dp[0][0]+1;
    }

Que15: House robber 2

int rob(vector<int>& nums) 
    {
        int n=nums.size();
        if(n==0) return 0;
        if(n==1) return nums[0];
        int dp[n];
        dp[0]=nums[0];				//robbing houses including 0th house upto house no (n-2) ,maximum stored in dp[n-2]
        dp[1]=max(nums[0],nums[1]);		//since 0th house is included, (n-1)th house is excluded (we can only choose one of them)
        for(int i=2;i<n-1;i++)
        {
            dp[i]=max(dp[i-2]+nums[i],dp[i-1]);
        }
        int mx=dp[n-2];
        memset(dp,0,sizeof(dp));
        dp[0]=0;				//robbing houses excluding 0th house upto house no (n-1) ,maximum stored in dp[n-1]
        dp[1]=nums[1];				//since 0th house is excluded, (n-1)th house is included (we can only choose one of them)
        for(int i=2;i<n;i++)
        {
            dp[i]=max(dp[i-2]+nums[i],dp[i-1]);
        }
        mx=max(mx,dp[n-1]);			//lastly take the maximum of dp[n-2] and dp[n-1]
        return mx;
    }


Que 16: Burst balloons

 int solve(vector<int>&a,vector<vector<int> >&dp,int i,int j){
        if(i>=j) return 0;
        if(dp[i][j]>0) return dp[i][j];
        int mx=INT_MIN;
        for(int k=i;k<=j-1;k++){
            int temp=a[i-1]*a[k]*a[j] + solve(a,dp,i,k) +
                solve(a,dp,k+1,j);
            mx=max(mx,temp);
        }
        return dp[i][j]=mx;
    }
    
public:
    int maxCoins(vector<int>& nums) 
    {
       int n=nums.size();
       vector<int>a(n+2);
       a[0]=1;
       for(int i=1;i<=n;i++) a[i]=nums[i-1];
       a[n+1]=1;
       vector<vector<int> >dp(n+2,vector<int>(n+2,-1));
       return solve(a,dp,1,n+1);
    }

Que 17: Number of longest incresing subsequence

int findNumberOfLIS(vector<int>& nums) 
    {
        int n=nums.size();
        if(n==0) return 0;
        int dp[n],cnt[n];           //dp[i] represents the maximum length of increasing subsequence ending at index i
				    //cnt[i] represents the number of maximum length of increasing subsequence ending at index i
        int maxlen=0,ans=0;
        for(int i=0;i<n;i++)
        {
            dp[i]=cnt[i]=1;
            for(int j=0;j<i;j++)
            {
                if(nums[j]<nums[i])
                {
                    if(dp[i]==dp[j]+1) cnt[i]+=cnt[j];
                    if(dp[i]<dp[j]+1)
                    {
                        dp[i]=dp[j]+1;
                        cnt[i]=cnt[j];
                    }
                }
            }
            maxlen=max(maxlen,dp[i]);
        }
        for(int i=0;i<n;i++)
        {
            if(dp[i]==maxlen) ans+=cnt[i];
        }
        return ans;
    }

Que 18: Maximal square (dp solution) and another space optimized solution  --->very important to notice how to convert simple dp solution to space optimized version

int maximalSquare(vector<vector<char>>& matrix) {
        if (matrix.empty()) {
            return 0;
        }
        int m = matrix.size(), n = matrix[0].size(), sz = 0;
        vector<vector<int>> dp(m, vector<int>(n, 0));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (!i || !j || matrix[i][j] == '0') {
                    dp[i][j] = matrix[i][j] - '0';
                } else {
                    dp[i][j] = min(dp[i - 1][j - 1], min(dp[i - 1][j], dp[i][j - 1])) + 1;
                }
                sz = max(dp[i][j], sz);
            }
        }
        return sz * sz;
    }

In the above code, it uses O(mn) space. Actually each time when we update dp[i][j], we only need dp[i-1][j-1], dp[i-1][j] (the previous row) and 
dp[i][j-1] (the current row). So we may just keep two rows.

//space optimized version
 int maximalSquare(vector<vector<char>>& matrix) {
        if (matrix.empty()) {
            return 0;
        }
        int m = matrix.size(), n = matrix[0].size(), sz = 0;
        vector<int> pre(n, 0), cur(n, 0);
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (!i || !j || matrix[i][j] == '0') {
                    cur[j] = matrix[i][j] - '0';
                } else {
                    cur[j] = min(pre[j - 1], min(pre[j], cur[j - 1])) + 1;
                }
                sz = max(cur[j], sz);
            }
            fill(pre.begin(), pre.end(), 0);
            swap(pre, cur);
        }
        return sz * sz;
    }

Que 19:Count of all the palindromic substrings

 int count =1;
    public: int countSubstrings(string s) {
    if(s.length()==0) 
        return 0;
    for(int i=0; i<s.length()-1; i++){
        checkPalindrome(s,i,i);     //To check the palindrome of odd length palindromic sub-string
        checkPalindrome(s,i,i+1);   //To check the palindrome of even length palindromic sub-string
    }
    return count;
}    

private: void checkPalindrome(string s, int i, int j) {
    while(i>=0 && j<s.length() && s[i]==s[j]){    //Check for the palindrome string 
        count++;    	//Increment the count if palindromin substring found
        i--;    	//To trace string in left direction
        j++;    	//To trace string in right direction
    }
}

Que 20: Distinct palindromic substrings

#include<bits/stdc++.h>
using namespace std;
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
	    string s;
	    cin>>s;
	    int n=s.size();
	    set<string>set;
	    vector<vector<bool> >dp(n,vector<bool>(n,false));
	    //dp[i][j] is true if substring (i...j) is palindrome
	    for(int i=0;i<n;i++){
	    dp[i][i]=1;
	    set.insert(s.substr(i,1));
	    //cout<<s.substr(i,1)<<" ";
	    }
	    for(int len=2;len<=n;len++){
	        for(int i=0;i<=n-len;i++){
	            int j=i+len-1;
	            if(s[i]==s[j] && len==2)
	            dp[i][j]=true;
	            else if(s[i]==s[j] && dp[i+1][j-1])
	            dp[i][j]=true;
	            
	            
	            if(dp[i][j]==true){
	            //cout<<s.substr(i,j-i+1)<<" ";
	            set.insert(s.substr(i,j-i+1));
	            }
	        }
	    }
	    cout<<set.size()<<"\n";
	}
	return 0;
}

Que 21: Longest zig zag subsequence

#include<bits/stdc++.h>
using namespace std;
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
	int t;
	cin>>t;
	while(t--)
	{
	    int n;
	    cin>>n;
	    vector<int>a(n);
	    for(int i=0;i<n;i++) cin>>a[i];
	    vector<vector<int> >dp(n,vector<int>(2));
	    for(int i=0;i<n;i++){
	        dp[i][0]=dp[i][1]=1;
	    }
	    int ans=1;
	    for(int i=1;i<n;i++){
	        for(int j=0;j<i;j++){
	            if(a[j]<a[i]){
	                dp[i][0]=max(dp[i][0],dp[j][1]+1);
	            }
	            else if(a[j]>a[i]){
	                dp[i][1]=max(dp[i][1],dp[j][0]+1);
	            }
	        }
	        ans=max(ans,max(dp[i][0],dp[i][1]));
	    }
	    cout<<ans<<"\n";
	}
}






