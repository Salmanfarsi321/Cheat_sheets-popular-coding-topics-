
------------------------------------------------------------------------------Array--------------------------------------------------------------------------------

1) Spiral matrix traversal

vector<int> spiralOrder(vector<vector<int>>& matrix) 
    {
        vector<int>ans;
        if(matrix.size()==0) return ans;
        int rowbegin=0;
        int rowend=matrix.size()-1;
        int colbegin=0;
        int colend=matrix[0].size()-1;
        while(rowbegin<=rowend && colbegin<=colend)
        {
            for(int j=colbegin;j<=colend;j++)
                ans.push_back(matrix[rowbegin][j]);
            rowbegin++;
            for(int j=rowbegin;j<=rowend;j++)
                ans.push_back(matrix[j][colend]);
            colend--;
            if(rowbegin<=rowend)
            {
                for(int j=colend;j>=colbegin;j--)
                    ans.push_back(matrix[rowend][j]);
                rowend--;
            }
            if(colbegin<=colend)
            {
                for(int j=rowend;j>=rowbegin;j--)
                    ans.push_back(matrix[j][colbegin]);
                colbegin++;
            }
        }
        return ans;
  }


2) clockwise rotate

 * first reverse up to down, then swap the symmetry 
 * 1 2 3     7 8 9     7 4 1
 * 4 5 6  => 4 5 6  => 8 5 2
 * 7 8 9     1 2 3     9 6 3
*/
void rotate(vector<vector<int> > &matrix) {
    reverse(matrix.begin(), matrix.end());
    for (int i = 0; i < matrix.size(); ++i) {
        for (int j = i + 1; j < matrix[i].size(); ++j)
            swap(matrix[i][j], matrix[j][i]);
    }
}

3) anticlockwise rotate

 * first reverse left to right, then swap the symmetry
 * 1 2 3     3 2 1     3 6 9
 * 4 5 6  => 6 5 4  => 2 5 8
 * 7 8 9     9 8 7     1 4 7
*/
void anti_rotate(vector<vector<int> > &matrix) {
    for (auto vi : matrix) reverse(vi.begin(), vi.end());
    for (int i = 0; i < matrix.size(); ++i) {
        for (int j = i + 1; j < matrix[i].size(); ++j)
            swap(matrix[i][j], matrix[j][i]);
    }
}