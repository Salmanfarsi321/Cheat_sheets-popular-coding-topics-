
--------------------------------------------------------------------Dynamic_programming(interviewbit)---------------------------------------------------------------

1.Longest common subsequence

/*Given two strings A and B. Find the longest common sequence ( A sequence which does not need to be contiguous), which is common in both the strings.
You need to return the length of such longest common subsequence*/

int Solution::solve(string A, string B) {
    int n = A.size();
    int m = B.size();
    int dp[n+1][m+1];
    memset(dp,0,sizeof(dp));
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            if(A[i-1] == B[j-1])
            dp[i][j] = 1 + dp[i-1][j-1];
            else
            dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
        }
    }
    return dp[n][m];
}

2.Longest palindromic subsequence

/*Given a string A, find the common palindromic sequence ( A sequence which does not need to be contiguous and is a pallindrome), which is common in itself.
You need to return the length of longest palindromic subsequence in A.*/

int Solution::solve(string A) {
    int n=A.size();
    int dp[n][n];
    for(int i=0;i<n;i++){
        dp[i][i]=1;
    }
    for(int len=2;len<=n;len++){
        for(int i=0;i<n-len+1;i++){
            int j=i+len-1;
            if(A[i] == A[j] && len==2)
            dp[i][j] = 2;
            else if(A[i] == A[j])
            dp[i][j] = dp[i+1][j-1]+2;
            else
            dp[i][j] = max(dp[i+1][j],dp[i][j-1]);
        }
    }
    return dp[0][n-1];
}

3.Edit distance

Given two strings A and B, find the minimum number of steps required to convert A to B. (each operation is counted as 1 step.)

You have the following 3 operations permitted on a word:

Insert a character
Delete a character
Replace a character

int Solution::minDistance(string A, string B) 
{
    int n=A.size();
    int m=B.size();
    int dp[n+1][m+1];
    memset(dp,0,sizeof(dp));
    for(int i=0;i<=n;i++)
    {
        for(int j=0;j<=m;j++)
        {
            if(i==0)
            dp[i][j]=j;
            else if(j==0)
            dp[i][j]=i;
            else if(A[i-1]==B[j-1])
            dp[i][j]=dp[i-1][j-1];
            else
            dp[i][j]=1+min({dp[i-1][j],dp[i][j-1],dp[i-1][j-1]});
        }
    }
    return dp[n][m];
}


4.Repeating subsequence

Given a string A, find length of the longest repeating sub-sequence such that the two subsequence don’t have same string character at same position,

i.e., any i’th character in the two subsequences shouldn’t have the same index in the original string.

NOTE: Sub-sequence length should be greater than or equal to 2.

int Solution::anytwo(string A) 
{
    int n=A.size(),m=A.size();
    int dp[n+1][m+1];
    for(int i=0;i<=n;i++)
    {
        for(int j=0;j<=m;j++)
        {
            if(i==0 || j==0) dp[i][j]=0;
            else if(i!=j && A[i-1]==A[j-1])
            dp[i][j]=dp[i-1][j-1]+1;
            else
            dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
        }
    }
    if(dp[n][m]>=2) return 1;
    return 0;
}

5. Distinct subsequences

Given two sequences A, B, count number of unique ways in sequence A, to form a subsequence that is identical to the sequence B.

Subsequence : A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing 
the relative positions of the remaining characters. (ie, “ACE” is a subsequence of “ABCDE” while “AEC” is not).

int Solution::numDistinct(string S, string T) 
{
    //convert S to T by deleting characters from S
    int n = S.size();
    int m = T.size();
    int dp[n+1][m+1];
    for(int i=1;i<=m;i++) dp[0][i] = 0;
    for(int i=0;i<=n;i++) dp[i][0] = 1;
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            if(S[i-1] == T[j-1])
            dp[i][j] = dp[i-1][j-1] + dp[i-1][j];
            else
            dp[i][j] = dp[i-1][j];
        }
    }
    return dp[n][m];
}

6.Interleaving strings  -----> reduction to LCS

int lcs(string a,string b){
    int n=a.size();
    int m=b.size();
    int dp[n+1][m+1];
    memset(dp,0,sizeof(dp));
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            if(a[i-1]==b[j-1])
            dp[i][j]=1+dp[i-1][j-1];
            else
            dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
        }
    }
    return dp[n][m];
}

int Solution::isInterleave(string A, string B, string C) {
     return A.size()==lcs(A,C) && B.size()==lcs(B,C);
}


7. Regular expression match1

Implement wildcard pattern matching with support for ‘?’ and ‘*’ for strings A and B.

’?’ : Matches any single character.
‘*’ : Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).

int Solution::isMatch(const string A, const string B) 
{
    int n=A.size(),m=B.size();
    vector<vector<bool>> dp(n+1,vector<bool>(m+1,false));
    dp[0][0]=true;
    for(int j=0;j<=m;j++)
    {
        if(B[j-1]=='*')
            dp[0][j]=dp[0][j-1];
    }
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=m;j++)
        {
            if(B[j-1]=='*')
                dp[i][j]=dp[i-1][j]||dp[i][j-1];
            else if(B[j-1]=='?' || A[i-1]==B[j-1])
                dp[i][j]=dp[i-1][j-1];
        }
    }
    return dp[n][m];
}



8.Regular expression 2 (Watch Tushar roy's video)

Implement regular expression matching with support for '.' and '*'.

'.' Matches any single character.
'*' Matches zero or more of the preceding element.

The matching should cover the entire input string (not partial).

Logic:If the next character of p is NOT ‘*’, then it must match the current character of s. Continue pattern matching with the next character of both s and p.
If the next character of p is ‘*’, then we do a brute force exhaustive matching of 0, 1, or more repeats of current character of p… 
Until we could not match any more characters.

int Solution::isMatch(const string A, const string B) {
    int n=A.size();
    int m=B.size();
    int dp[n+1][m+1];			//dp[i][j] is equal to 1 if the substring A(0...i) matches with the substring B(0...j)
    memset(dp,0,sizeof(dp));
    for(int i=0;i<=n;i++){
        for(int j=0;j<=m;j++){
            if(i==0 && j==0)		
            dp[i][j]=1;			//empty string matches empty pattern
            else if(j==0)
            dp[i][j]=0;			//if pattern is empty no matching possible
            else if(i==0){
                if(B[j-1]=='*')		//read it as pattern[j] if 1 based indexing
                dp[i][j]=dp[i][j-2];	//if string is empty but pattern is not then we still can have match if we have 0 occurences of pattern[j-1]
					//and answer would be at dp[i][j-2]
            }
            else{
            if(A[i-1]==B[j-1] || B[j-1]=='.')
            dp[i][j]=dp[i-1][j-1];
            else if(B[j-1]=='*'){			//read it as pattern[j]
                dp[i][j]=dp[i][j-2];			//if we have 0 occurences of pattern[j-1]
                if(A[i-1]==B[j-2] || B[j-2]=='.')	//when we don't have 0 occurences of pattern[j-1] ,read it as A[i]=B[j-1] || B[j-1]=='.'
                dp[i][j]=dp[i][j]||dp[i-1][j];
            }
            else
            dp[i][j]=0;
            }
        }
    }
    return dp[n][m];
}



9) Scramble string

Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.

Below is one possible representation of s1 = "great":

    great
   /    \
  gr    eat
 / \    /  \
g   r  e   at
           / \
          a   t
To scramble the string, we may choose any non-leaf node and swap its two children.

For example, if we choose the node "gr" and swap its two children, it produces a scrambled string "rgeat".

    rgeat
   /    \
  rg    eat
 / \    /  \
r   g  e   at
           / \
          a   t
We say that "rgeat" is a scrambled string of "great".

Similarly, if we continue to swap the children of nodes "eat" and "at", it produces a scrambled string "rgtae".

    rgtae
   /    \
  rg    tae
 / \    /  \
r   g  ta  e
       / \
      t   a
We say that "rgtae" is a scrambled string of "great".

Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.

class Solution {
    unordered_map<string,bool>mp;
public:
    bool isScramble(string s1, string s2) {
        if(s1.compare(s2) == 0)
            return true;
        if(s1.size() <= 1)
            return false;
        string key = s1;
        key.push_back(' ');
        key.append(s2);
        if(mp.find(key)!=mp.end()) return mp[key];
        int n = s1.size();
        bool flag=false;
        for(int i=1;i<=n-1;i++){
            bool cond1=isScramble(s1.substr(0,i),s2.substr(n-i,i)) &&   //case1: gr|eat   eat|gr  
                       isScramble(s1.substr(i,n-i),s2.substr(0,n-i));
            bool cond2=isScramble(s1.substr(0,i),s2.substr(0,i)) &&     //case2: gr|eat   gr|ate
                       isScramble(s1.substr(i,n-i),s2.substr(i,n-i));
            if(cond1 || cond2){
                flag=true;
                break;
            }
        }
       return mp[key] = flag; 
    }
};