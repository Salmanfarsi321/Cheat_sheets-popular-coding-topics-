
-----------------------------------------------------------------------------Graph(geeks for geeks)-----------------------------------------------------------------

(1) Treasure island

#include<bits/stdc++.h>
using namespace std;

int dx[4] = {1,-1,0,0};
int dy[4] = {0,0,1,-1};

int bfs(int n,int m,vector<vector<char> >&a,vector<vector<bool> >&vis){
	queue<pair<int,int> >q;
	q.push({0,0});
	int steps = 0;
	vis[0][0] = true;
	while(!q.empty()){
		int sz = q.size();
		while(sz--){
		int x_cord = q.front().first;
		int y_cord = q.front().second;
		//cout<<x_cord<<" "<<y_cord<<endl;
		if(a[x_cord][y_cord] == 'X') return steps;
		q.pop();
		for(int i=0;i<4;i++){
			int x = x_cord + dx[i];
			int y = y_cord + dy[i];
			if(x>=0 && y>=0 && x<n && y<m && a[x][y] !='D' && !vis[x][y]){
				q.push({x,y});
				vis[x][y] = true;
			}
		}
		}
		steps++;
	}
	return steps;
}

int main(){
	int n,m;
	cin>>n>>m;
	vector<vector<char> >a(n,vector<char>(m));
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			cin>>a[i][j];
		}
	}
	vector<vector<bool> >vis(n,vector<bool>(m,false));
	cout<<bfs(n,m,a,vis)<<endl;
	return 0;
}


(2) Unit area of largest regions of 1's

#include<bits/stdc++.h>
using namespace std;

int dx[8] = {1,-1,0,0,1,-1,-1,1};
int dy[8] = {0,0,-1,1,1,-1,1,-1};

int steps;

void dfs(int i,int j,vector<vector<char> >&a,int n,int m){
    if(i>=0 && j>=0 && i<n && j<m && a[i][j] == '1'){
        a[i][j] = '0';
        steps++;
        for(int k=0;k<8;k++){
            int x = i+dx[k];
            int y = j+dy[k];
            dfs(x,y,a,n,m);
        }
    }
}

int main()
{
	int t;
	cin>>t;
	while(t--){
	    int n,m;
	    cin>>n>>m;
	    vector<vector<char> >a(n,vector<char>(m));
	    for(int i=0;i<n;i++){
	        for(int j=0;j<m;j++)
	            cin>>a[i][j];
	    }
	    int mx=0;
	    for(int i=0;i<n;i++){
	        for(int j=0;j<m;j++){
	            if(a[i][j] == '1'){
	                steps = 0;
	                dfs(i,j,a,n,m);
	                mx = max(mx,steps);
	            }
	        }
	    }
	    cout<<mx<<endl;
	}
	return 0;
}

(3) Flood fill algorithm

#include<bits/stdc++.h>
using namespace std;

void dfs(int n,int m,vector<vector<int> >&grid,int i,int j,int k,int orig_color){
    if(i>=0 && j>=0 && i<n && j<m && grid[i][j] == orig_color){
        grid[i][j] = k;
        dfs(n,m,grid,i+1,j,k,orig_color);
        dfs(n,m,grid,i-1,j,k,orig_color);
        dfs(n,m,grid,i,j+1,k,orig_color);
        dfs(n,m,grid,i,j-1,k,orig_color);
    }
}

int main()
{
	int t;
	cin>>t;
	while(t--){
	    int n,m;
	    cin>>n>>m;
	    vector<vector<int> >grid(n,vector<int>(m));
	    for(int i=0;i<n;i++){
	        for(int j=0;j<m;j++)
	            cin>>grid[i][j];
	    }
	    int x,y,k;
	    cin>>x>>y>>k;
	    int orig_color = grid[x][y];
	    dfs(n,m,grid,x,y,k,orig_color);
	    for(int i=0;i<n;i++){
	        for(int j=0;j<m;j++)
	            cout<<grid[i][j]<<" ";
	    }
	    cout<<endl;
	}
	return 0;
}

(4) Dijkstra using adjacency matrix


/*  Function to implement Dijkstra
*   g: vector of vectors which represents the graph
*   src: source vertex to start traversing graph with
*   V: number of vertices
*/
vector <int> dijkstra(vector<vector<int>> g, int src, int V)
{
    vector<int>d(V,INT_MAX);
    priority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > >q;
    q.push({0,src}); // {distance,source}
    d[src] = 0;
    while(!q.empty()){
        int dis = q.top().first;
        int x = q.top().second;
        q.pop();
        if(d[x] < dis) continue;
        for(int i=0;i<V;i++){
            if(g[x][i]!=0 && d[x] + g[x][i] < d[i]){
            d[i]=d[x]+g[x][i];
            q.push({d[i],i});
            }
        }
    }
    return d;
}


Que: Dijkstra using adjacency list (Follow up)






(5) Topological sorting

Topological sorting for Directed Acyclic Graph (DAG) is a linear ordering of vertices such that for every directed edge uv, 
vertex u comes before v in the ordering.Topological Sorting for a graph is not possible if the graph is not a DAG.

//Algo
We can modify DFS to find Topological Sorting of a graph. In DFS, we start from a vertex, we first print it and then recursively call DFS for its adjacent vertices. 
In topological sorting, we use a temporary stack. We donâ€™t print the vertex immediately, we first recursively call topological sorting for all its adjacent vertices,
then push it to a stack. Finally, print contents of stack. 
Note that a vertex is pushed to stack only when all of its adjacent vertices (and their adjacent vertices and so on) are already in stack.

// The Graph structure is as folows

/*  Function which sorts the graph vertices in topological form
*   N: number of vertices
*   adj[]: input graph
*/
void dfs(int u,vector<int>adj[],stack<int>&stk,vector<bool>&vis){
    vis[u] = true;
    for(auto v:adj[u]){
        if(!vis[v])
        dfs(v,adj,stk,vis);
    }
    stk.push(u);
}

vector<int> topoSort(int V, vector<int> adj[]) {
    vector<int>ans;
    stack<int>stk;
    vector<bool>vis(V,false);
    for(int i=0;i<V;i++){
        if(!vis[i])
        dfs(i,adj,stk,vis);
    }
    while(!stk.empty()){
        int x = stk.top();
        stk.pop();
        ans.push_back(x);
    }
    return ans;
}


(6) Shortest source to destination


#include<bits/stdc++.h>
using namespace std;

int dx[4] = {1,-1,0,0};
int dy[4] = {0,0,1,-1};

int n,m;

int bfs(vector<vector<int> >&grid,vector<vector<bool> >&vis,int des_x,int des_y){
    queue<pair<int,int> >q;
    q.push({0,0});
    vis[0][0] = true;
    int steps = 0;
    while(!q.empty()){
        int sz = q.size();
        while(sz--){
        int cord_x = q.front().first;
        int cord_y = q.front().second;
        q.pop();
        if(cord_x == des_x && cord_y == des_y) return steps;
        for(int i=0;i<4;i++){
            int x = cord_x + dx[i];
            int y = cord_y + dy[i];
            if(x>=0 && y>=0 && x<n && y<m && grid[x][y]==1 && !vis[x][y]){
                vis[x][y] = true;
                q.push({x,y});
            }
        }
        }
        steps++;
    }
    return -1;
}

int main()
{
	int t;
	cin>>t;
	while(t--){
	    cin>>n>>m;
	    vector<vector<int> >grid(n,vector<int>(m));
	    for(int i=0;i<n;i++){
	        for(int j=0;j<m;j++){
	            cin>>grid[i][j];
	        }
	    }
	    int x,y;
	    cin>>x>>y;
	    vector<vector<bool> >vis(n,vector<bool>(m,false));
	    if(grid[0][0] == 0) cout<<"-1\n";
	    else
	    cout<<bfs(grid,vis,x,y)<<endl;
	}
	return 0;
}



(7) Detect cycle in an undirected graph

//1st approach(If u has a node v which is already visited and v is not the parent of u ,then certainly there is a cycle)

bool cyclic_helper(vector<int>g[],vector<bool>&vis,int V){
    vector<int>parent(V,-1);
    queue<int>q;
    q.push(0);
    vis[0] = true;
    while(!q.empty()){
       int u = q.front();
       q.pop();
       for(auto v:g[u]){
           if(!vis[v]){
               vis[v] = true;
               q.push(v);
               parent[v] = u;
           }
           else{
               if(v!=parent[u]){
                   return true;
               }
           }
       }
   }
   return false;
}
bool isCyclic(vector<int> g[], int V)
{
   // Your code here
   vector<bool>vis(V,false);
   for(int i=0;i<V;i++){
        if(!vis[i] && cyclic_helper(g,vis,V))
        return true;
   }
   return false;
}



//2nd approach using graph coloring				----->  loved this concept
/* This function is used to detect a cycle in undirected graph

*  g[]: array of vectors to represent graph
*  V: number of vertices
*/

bool cyclic_helper(int u,int par,vector<int>g[],vector<int>&color,int V){
    color[u] = 1;   //make it gray vertex
    for(auto v:g[u]){
        if(v == par) continue;
        if(color[v] == 0){      //not visited vertex (white vertex)
            if(cyclic_helper(v,u,g,color,V))
            return true;
        }
        else if(color[v] ==1){  //if during dfs traversal we encounter a gray vertex
            return true;   
        }
    }
    color[u] = 2;   //make it black vertex
    return false;
}

bool isCyclic(vector<int> g[], int V)
{
   // Your code here
   vector<int>color(V,0);
   for(int i=0;i<V;i++){
        if(color[i]==0 && cyclic_helper(i,-1,g,color,V))
        return true;
   }
   return false;
}


(8) Minimum spannig tree


// Function to construct and print MST for
// a graph represented using adjacency
// matrix representation, with V vertices.
// graph[i][j] = weight if edge exits else INT_MAX


int find(int i,vector<int>&parent){
    if(parent[i]!=i){
        parent[i] = find(parent[i],parent);
    }
    return parent[i];
}

void myunion(int x,int y,vector<int>&parent,vector<int>&rnk){
    int a = find(x,parent);
    int b = find(y,parent);
    if(a!=b){
        if(rnk[a] < rnk[b]) swap(a,b);
        parent[b] = a;
        if(rnk[a] == rnk[b]) 
        rnk[a]++;
    }
}

int spanningTree(int V, int E, vector<vector<int>> &graph) {
    vector<int>parent(V);
    for(int i=0;i<V;i++) parent[i] = i;
    vector<int>rnk(V,0);
    vector<pair<int,pair<int,int> > >p;
    for(int i=0;i<V;i++){
        for(int j=0;j<V;j++){
            if(graph[i][j]!=INT_MAX)
            p.push_back({graph[i][j],{i,j}});
        }
    }
    sort(p.begin(),p.end());
    int min_cost = 0;
    for(int i=0;i<p.size();i++){
        int x = p[i].second.first;
        int y = p[i].second.second;
        if(find(x,parent) != find(y,parent)){
            min_cost += p[i].first;
            myunion(x,y,parent,rnk);
        }
    }
    return min_cost;
}


(9) strongly connected components (Kosarju's Algorithm)


/*  Function to find the number of strongly connected components
*   using Kosaraju's algorithm
*   V: number of vertices
*   adj[]: array of vectors to represent graph
*/
void dfs2(int u,vector<int>adj[],vector<bool>&vis){
    vis[u]=true;
    //cout<<u<<" ";
    for(auto v:adj[u]){
        if(!vis[v])
        dfs2(v,adj,vis);
    }
}

void dfs1(int u,vector<int>adj[],vector<bool>&vis,stack<int>&stk){
    vis[u]=true;
    for(auto v:adj[u]){
        if(!vis[v]){
            dfs1(v,adj,vis,stk);
        }
    }
    stk.push(u);
}


int kosaraju(int V, vector<int> adj[])
{
    stack<int>stk;
    vector<bool>vis(V,false);
    for(int i=0;i<V;i++){
        if(vis[i]==false){
            dfs1(i,adj,vis,stk);
        }
    }
    
    for(int i=0;i<V;i++) vis[i]=false;
    vector<int>adj1[V];
    for(int i=0;i<V;i++){
        for(int x:adj[i]){
            adj1[x].push_back(i);
        }
    }
    int cnt=0;
    while(!stk.empty()){
        int u=stk.top();
        stk.pop();
        if(vis[u]==false){
            dfs2(u,adj1,vis);
            cnt++;
        }
    }
    return cnt;
}


(10) Bipartite graph


/*The function takes an adjacency matrix representation of the graph (g)
and an integer(v) denoting the no of vertices as its arguments.
You are required to complete below method */
bool bfs(int src,int G[][MAX],int V,vector<int>&color){
    queue<int>q;
    q.push(src);
    color[src] = 1;
    while(!q.empty()){
        int x = q.front();
        q.pop();
        if(G[x][x] == 1) return false;  //if the graph contain self loops
        for(int i=0;i<V;i++){
            if(G[x][i] == 1 && color[i] == -1){
                q.push(i);
                color[i] = 1-color[x];
            }
            else if(G[x][i] == 1 && color[x] == color[i])
                return false;
        }
    }
    return true;
}

bool isBipartite(int G[][MAX],int V)
{
    vector<int>color(V,-1);
    for(int i=0;i<V;i++){
        if(color[i] == -1){
            if(bfs(i,G,V,color) == false) 
            return false;
        }
    }
    return true;
}



(11) circle of strings (Application of Kosarju's algo -> check if the graph is an eulerian circuit by checking if the indegree and outdegree are sameor not and also 
check if the nodes which have non zero degree form a strongly connected component)


typedef long long int ll;
using namespace std;

ll tmp;


bool vis[26];
bool vis1[26];
vector<int> G[26];
vector<int> GR[26];
int inCount[26]={0};
// RESETS ALL CONTAINERS
void _cleaner(){
    for(int i=0;i<26;i++){
        vis1[i]=false;
        vis[i]=false;
        G[i].clear();
        GR[i].clear();
        inCount[i]=0;
    }
    
}
//DFS ON G
void _dfs1(int i){
    vis[i]=true;
    for(auto it:G[i]){
        if(vis[it]==false){
            _dfs1(it);
        }
    }
}
//DFS ON GR (GR == TRANSPOSED G)
void _dfs2(int i){
    vis1[i]=true;
    for(auto it:GR[i]){
        if(vis1[it]==false){
            _dfs2(it);
        }
    }
}
//CHECK FOR STRONGLY CONNECTED COMPONENT
bool isSC(){
    int _tut=-1;
    for(int i=0;i<26;i++){
        if(vis[i]==false and G[i].size()>0){
            _tut=i;
            break;
        }
    }
    _dfs1(_tut);
    for(int i=0;i<26;i++){
        if(G[i].size()>0 and vis[i]==false){
            return false;
        }
    }
    _dfs2(_tut);
    for(int i=0;i<26;i++){
        if(GR[i].size()>0 and vis1[i]==false){
            return false;
        }
    }
    return true;
}
//EULER CIRCUIT CHECKER
bool _checker(){
    //INCOUNT == OUTCOUNT
    for(int i=0;i<26;i++){
        if(G[i].size()!=inCount[i]){
            return false;
        }
    }
    //SINGLY CONNECTED
    if(isSC()==true){
        return true;
    }
    return false;
}
/* SOLUTION */
void sol(){
    int t=1;
    cin >> t;
    while(t--){
        int n;
        cin >> n;
        _cleaner();
        string s;
        for(int i=0;i<n;i++){
            cin >> s;
            GR[s[s.length()-1]-'a'].pb(s[0]-'a');
            G[s[0]-'a'].pb(s[s.length()-1]-'a');
            inCount[s[s.length()-1]-'a']++;
        }
        if(_checker()==true){
            cout << 1 << endl;
        }
        else{
            cout << 0 << endl;
        }
    }
}

/* MAIN FUNCTION */
int main()
{
    /**/IOS/**/
        sol();
}




------------------------------------------------------------------------Interviewbit graph problems-------------------------------------------------------------------

12) Detect cycle in a directed graph

map<int,vector<int> >adj;
 
int dfs(int u,vector<int>& color){
    color[u] = 1;
    for(auto v:adj[u]){
        if(color[v] == 0){
            if(dfs(v,color))
            return true;
        }
        else if(color[v] == 1)
        return true;
    }
    color[u] = 2;
    return false;
}

int Solution::solve(int A, vector<vector<int> > &B) {
    adj.clear();
    int n = B.size();
    for(int i=0;i<n;i++){
        int u = B[i][0];
        int v = B[i][1];
        adj[u].push_back(v);
    }
    vector<int>color(A+1,0);
    for(int i=1;i<=A;i++){
        if(color[i] == 0){
            if(dfs(i,color))
            return 1;
        }
    }
    return 0;
}


13) Detect cycle in an undirected graph


map<int,vector<int> >adj;
 
int dfs(int u,int par,vector<int>& color){
    color[u] = 1;
    for(auto v:adj[u]){
        if(v == par) continue;
        if(color[v] == 0){
            if(dfs(v,u,color))
            return true;
        }
        else if(color[v] == 1)
        return true;
    }
    color[u] = 2;
    return false;
}

int Solution::solve(int A, vector<vector<int> > &B) {
    adj.clear();
    int n = B.size();
    for(int i=0;i<n;i++){
        int u = B[i][0];
        int v = B[i][1];
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    vector<int>color(A+1,0);
    for(int i=1;i<=A;i++){
        if(color[i] == 0){
            if(dfs(i,-1,color))
            return 1;
        }
    }
    return 0;
}


14)Delete edge  --->  dp on trees (Loved it)

/*Given a undirected tree with N nodes labeled from 1 to N.

Each node has a certain weight assigned to it given by an integer array A of size N.

You need to delete an edge in such a way that Product between sum of weight of nodes in one subtree with sum of weight of nodes in other subtree is maximized.

Return this maximum possible product modulo 109 + 7.

NOTE:

The tree is rooted at node labeled with 1.*/


const int N = 1e5+2;
const int mod = 1e9+7;
#define ll long long
map<int,vector<int> >adj;
vector<int>dp(N);

ll mx;

void dfs(int u,int par,ll total_sum,vector<int>& A){
    dp[u] = A[u-1];
    ll sum = 0;
    for(auto v:adj[u]){
        if(v == par) continue;
        dfs(v,u,total_sum,A);
        sum += dp[v];
    }
    dp[u] += sum;
    ll val = ((total_sum-dp[u])*dp[u])%mod;
    mx = max(mx,val);
}


int Solution::deleteEdge(vector<int> &A, vector<vector<int> > &B) {
    int m = B.size();
    mx = 0;
    adj.clear();
    dp.clear();
    ll total_sum = 0;
    for(int i=0;i<m;i++){
        int u = B[i][0];
        int v = B[i][1];
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    for(ll ele : A) total_sum += ele;
    dfs(1,-1,total_sum,A);
    return mx;
}


15) Path in a directed graph

/*Given an directed graph having A nodes labelled from 1 to A containing M edges given by matrix B of size M x 2such that there is a edge directed from node
B[i][0] to node B[i][1].
Find whether a path exists from node 1 to node A.
Return 1 if path exists else return 0*/

map<int,vector<int> >adj;

bool dfs(int u,int A,vector<bool>&vis){
    vis[u] = true;
    for(auto v:adj[u]){
        if(!vis[v]){
            if(dfs(v,A,vis)) return true;
        }
    }
    if(u == A) return true;
    else
    return false;
}

int Solution::solve(int A, vector<vector<int> > &B) {
    adj.clear();
    int m = B.size();
    for(int i=0;i<m;i++){
        int u = B[i][0];
        int v = B[i][1];
        adj[u].push_back(v);
    }
    vector<bool>vis(A+1,false);
    return dfs(1,A,vis);
}


16) Pair with good ones   (Love it)

/*Given a tree with N nodes labelled from 1 to N.
Each node is either good or bad denoted by binary array A of size N where if A[i] is 1 then ithnode is good else if A[i] is 0 then ith node is bad.
Also the given tree is rooted at node 1 and you need to tell the number of root to leaf paths in the tree that contain not more than C good nodes.

NOTE:
Each edge in the tree is bi-directional*/
map<int,vector<int> >adj;


void dfs(int u,vector<int>& A,vector<bool>& vis,int C,int &count,int sum){
    if(sum + A[u-1] > C) 
        return;
    if(adj[u].size() == 1 && !vis[u] && sum + A[u-1] <= C){
        count++;
        return;
    }
    vis[u] = true;
    for(auto v:adj[u]){
        if(!vis[v])
        dfs(v,A,vis,C,count,sum+A[u-1]);
    }
    return;
}


int Solution::solve(vector<int> &A, vector<vector<int> > &B, int C) {
    int m = B.size();
    int n = A.size();
    adj.clear();
    for(int i=0;i<m;i++){
        int u = B[i][0];
        int v = B[i][1];
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    int count = 0;
    vector<bool> vis(n+1,false);
    dfs(1,A,vis,C,count,0);
    return count;
}




17) Min cost path  (Dijkstra's Algo)

/*You are given a AB character matrix named C. Every cell in C has a character U,R,L or D indicating up,right,left and down.
Your target is to go from top left corner to the bottom right corner of the matrix.
But there are some restrictions while moving along the matrix:
If you follow what is written in the cell then you can move freely.
But if you don't follow what is written in the cell then you have to pay 1 unit of cost.
Like: If a cell contains character U and you go right instead of Up you have to pay 1 unit of cost.
So your task is to find the minimum cost to go from top-left corner to the bottom-right corner*/



Problem Constraints
1 <= A,B <= 103
C[i][j] can be either U,R,L or D.

#define pii pair<int,pair<int,int>>

int dx[4] = {1,-1,0,0};
int dy[4] = {0,0,1,-1};
char dir[4] = {'D','U','R','L'};

int Solution::solve(int A, int B, vector<string> &C) {
    priority_queue<pii,vector<pii>,greater<pii> >pq;
    vector<vector<int> >cost(A,vector<int>(B,1e9));
    pq.push({0,{0,0}});
    cost[0][0] = 0;
    while(!pq.empty()){
        int cord_x = pq.top().second.first;
        int cord_y = pq.top().second.second;
        pq.pop();
        char temp = C[cord_x][cord_y];
        if(C[cord_x][cord_y] == ' ') continue;
        C[cord_x][cord_y] = ' ';
        for(int i=0;i<4;i++){
            int x = cord_x + dx[i];
            int y = cord_y + dy[i];
            if(x>=0 && y>=0 && x<A && y<B){
                int penalty = (temp == dir[i]) ? 0:1;
                cost[x][y] = min(cost[x][y],cost[cord_x][cord_y]+penalty);
                pq.push({cost[x][y],{x,y}});
            }
        }
    }
    return cost[A-1][B-1];
}



18) Permuation swaps (Disjoint set -> Union by rank and path compression)

/*Rishabh has a permutation A of N integers 1, 2, ... N but he doesn't like it. Rishabh wants to get a permutation B.

Also, Rishabh has some M good pairs given in a form of 2D matrix C of size M x 2  where (C[i][0], C[i][1]) denotes that two indexes of the permutation A.

In one operation he can swap Ax and Ay only if (x, y) is a good pair.

You have to tell whether Rishabh can obtain permutation B by performing the above operation any number of times on permutation A.

If the permutation B can be obtained return 1 else return 0.

Problem Constraints
2 <= N <= 105
1 <= M <= 105
1 <= A[i], B[i] <= N
A[i] and B[i] are all distinct.
1 <= C[i][0] < C[i][1] <= N


Input Format
First arguement is an integer array A of size N denoting the permutation A.

Second arguement is an integer array B of size N denoting the permutation B.

Third argument is an 2D integer array C of size M x 2 denoting the M good pairs.

Output Format
If the permutation B can be obtained return 1 else return 0.

Example Input
Input 1:

 A = [1, 3, 2, 4]
 B = [1, 4, 2, 3]
 C = [ 
        [3, 4]
     ]

Output : 0


int find(int x,vector<int>& parent){
    if(parent[x]!=x)
    parent[x] = find(parent[x],parent);
    return parent[x];
}

void my_union(int x,int y,vector<int>&parent,vector<int>& rnk){
    int a = find(x,parent);
    int b = find(y,parent);
    if(a!=b){
        if(rnk[a]<rnk[b]) swap(a,b);
        parent[b] = a;
        if(rnk[a] == rnk[b]) rnk[a]++;
    }
}

int Solution::solve(vector<int> &A, vector<int> &B, vector<vector<int> > &C) {
    int n = A.size();
    vector<int>parent(n+1,-1);
    vector<int>rnk(n+1,0);
    for(int i=0;i<=n;i++) parent[i] = i;
    for(int i=0;i<C.size();i++){
        int u = A[C[i][0]-1];
        int v = A[C[i][1]-1];
        my_union(u,v,parent,rnk);
    }
    for(int i=0;i<n;i++){
        if(find(A[i],parent)!=find(B[i],parent))
        return 0;
    }
    return 1;
}


19) Water flow ( Google)





20)Valid path  --> Must do

/*There is a rectangle with left bottom as  (0, 0) and right up as (x, y). There are N circles such that their centers are inside the rectangle.
Radius of each circle is R. Now we need to find out if it is possible that we can move from (0, 0) to (x, y) without touching any circle.

Note : We can move from any cell to any of its 8 adjecent neighbours and we cannot move outside the boundary of the rectangle at any point of time*/

int dx[8]={1,1,1,-1,-1,-1,0,-1};
int dy[8]={1,-1,0,1,-1,0,0,1};
 
bool visited[100][100];
 
bool issafe(int x,int y,int dis_x,int dis_y){
    if(x<0 || y<0 || x>dis_x || y>dis_y) return false;
    return true;
}
 
bool inside_circle(int x,int y,int n,int r,vector<int>&a,vector<int>&b){
    for(int i=0;i<n;i++){
        if((x-a[i])*(x-a[i])+(y-b[i])*(y-b[i])<=r*r)
        return true;
    }
    return false;
}
 
void dfs(int st_x,int st_y,int end_x,int end_y,int n,int r,vector<int>& a,vector<int>& b){
    visited[st_x][st_y]=true;
    for(int i=0;i<8;i++){
        int x=st_x+dx[i];
        int y=st_y+dy[i];
        if(issafe(x,y,end_x,end_y) && !inside_circle(x,y,n,r,a,b) && !visited[x][y]){
            dfs(x,y,end_x,end_y,n,r,a,b);
        }
    }
}
 
string Solution::solve(int x, int y, int n, int r, vector<int> &a, vector<int> &b) {
    memset(visited,false,sizeof(visited));
    dfs(0,0,x,y,n,r,a,b);
    string ans="";
    if(visited[x][y]) ans+="YES";
    else
    ans+="NO";
    return ans;
}



21) Level order Traversal


Given a binary tree, return the level order traversal of its nodesâ€™ values. (ie, from left to right, level by level).

Example :
Given binary tree

    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:

[
  [3],
  [9,20],
  [15,7]
]


vector<vector<int> > Solution::levelOrder(TreeNode* A) {
    vector<vector<int> >res;
    queue<TreeNode* >q;
    q.push(A);
    while(!q.empty()){
        int sz=q.size();
        vector<int>temp;
        while(sz--){
        TreeNode* x=q.front();
        temp.push_back(x->val);
        q.pop();
        if(x->left)
        q.push(x->left);
        if(x->right)
        q.push(x->right);
        }
        res.push_back(temp);
    }
    return res;
}


22) Smallest multiple with 0's and 1's   ---> hard  ( To do again)

You are given an integer N. You have to find smallest multiple of N which consists of digits 0 and 1 only. Since this multiple could be large, return it in form of a
string.

Note:

Returned string should not contain leading zeroes.
For example,

For N = 55, 110 is smallest multiple consisting of digits 0 and 1.
For N = 2, 10 is the answer.

string Solution::multiple(int n) {
    
queue<int>q;
vector<bool>visited(n);vector<int>parent(n);
vector<bool>digit(n);
int rem=1%n;
visited[rem]=1;
parent[rem]=-1;
digit[rem]=1;
q.push(rem);
while(!q.empty())
 {
     int curr=q.front();
     q.pop();
     if(curr==0)break;
     int mod0=(curr*10)%n;
     int mod1=(curr*10 + 1)%n;
     if(visited[mod0]==0){
        visited[mod0]=1;
        parent[mod0]=curr;
        digit[mod0]=0;
        q.push(mod0);
     }
 
     if(visited[mod1]==0){
        visited[mod1]=1;
        parent[mod1]=curr;
        digit[mod1]=1;
        q.push(mod1);
     }
 }
 string ans="";
 int i=0;
 while(i != -1){
    ans+=digit[i]+'0';
    i=parent[i];
 }
 reverse(ans.begin(),ans.end());
 return ans;
}


23) Commutable isalnds   ( Kruskal's MST)

There are A islands and there are M bridges connecting them. Each bridge has some cost attached to it.

We need to find bridges with minimal cost such that all islands are connected.

It is guaranteed that input data will contain at least one possible scenario in which all islands are connected with each other.

Input 1:
    A = 4
    B = [   [1, 2, 1]
            [2, 3, 4]
            [1, 4, 3]
            [4, 3, 2]
            [1, 3, 10]  ]

Output 1:
    6

Explanation 1:
    We can choose bridges (1, 2, 1), (1, 4, 3) and (4, 3, 2), where the total cost incurred will be (1 + 3 + 2) = 6.

Input 2:
    A = 4
    B = [   [1, 2, 1]
            [2, 3, 2]
            [3, 4, 4]
            [1, 4, 3]   ]

Output 2:
    6

Explanation 2:
    We can choose bridges (1, 2, 1), (2, 3, 2) and (1, 4, 3), where the total cost incurred will be (1 + 2 + 3) = 6.


const int N=6e5+5;
vector<pair<int,pair<int,int> > >p;
vector<int>parent(N,0);
vector<int>rnk(N,0);
int n;
 
void initialize(){
    for(int i=1;i<=n;i++) parent[i]=i;
}
 
int find(int i){
    if(parent[i]!=i){
        parent[i]=find(parent[i]);
    }
    return parent[i];
}
 
void my_union(int x, int y){
    int a=find(x);
    int b=find(y);
    if(a!=b){
        if(rnk[a]<rnk[b]) swap(a,b);
        parent[b]=a;
        if(rnk[a]==rnk[b])
        rnk[a]++;
    }
}
 
int kruskal(){
    initialize();
    int min_cost=0;
    for(int i=0;i<p.size();i++){
        int x=p[i].second.first;
        int y=p[i].second.second;
        if(find(x)!=find(y)){
        min_cost+=p[i].first;
        my_union(x,y);
        }
    }
    return min_cost;
}
 
int Solution::solve(int A, vector<vector<int> > &B) {
    n=A;
    int m=B.size();
    p.clear();
    for(int i=0;i<m;i++){
        p.push_back(make_pair(B[i][2],make_pair(B[i][0],B[i][1])));
    }
    sort(p.begin(),p.end());
    return kruskal();
}


24) Possibility of finsihing all courses given prerequisite ( Cycle in a directed graph)

There are a total of A courses you have to take, labeled from 1 to A.

Some courses may have prerequisites, for example to take course 2 you have to first take course 1, which is expressed as a pair: [1,2].

Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

Return 1 if it is possible to finish all the courses, or 0 if it is not possible to finish all the courses.

Input 1:
    A = 3
    B = [1, 2]
    C = [2, 3]

Output 1:
    1

Explanation 1:
    It is possible to complete the courses in the following order:
        1 -> 2 -> 3

Input 2:
    A = 2
    B = [1, 2]
    C = [2, 1]

Output 2:
    0

Explanation 2:
    It is not possible to complete all the courses.


bool dfs(int u,vector<int>* adj,vector<int>& color){
    color[u] = 1;  // gray color node
    for(auto v:adj[u]){
        if(color[v] == 0){
            if(dfs(v,adj,color)) return true;
        }
        else if(color[v] == 1){
            return true;
        }
    }
    color[u] = 2;
    return false;
}

int Solution::solve(int A, vector<int> &B, vector<int> &C) {
    int n=A;
    vector<int>adj[n+1];
    vector<int>color(n+1,0); // white color node
    for(int i=0;i<B.size();i++){
        adj[B[i]].push_back(C[i]);
    }
    for(int i=1;i<=n;i++){
        if(color[i] == 0 && dfs(i,adj,color))
        return 0;
    }
    return 1;
}


25) Black shapes  (No of connected components)

Given N x M character matrix A of O's and X's, where O = white, X = black.

Return the number of black shapes. A black shape consists of one or more adjacent X's (diagonals not included)

bool issafe(int i,int j,int n,int m,vector<string> &A){
    if(i<0 || j<0 || i>=n || j>=m || A[i][j]=='O') return false;
    return true;
}
 
void dfs(int i,int j,int n,int m,vector<string> &A){
    if(issafe(i,j,n,m,A)){
    A[i][j]='O';
    dfs(i+1,j,n,m,A);
    dfs(i-1,j,n,m,A);
    dfs(i,j+1,n,m,A);
    dfs(i,j-1,n,m,A);
    }
}
 
int Solution::black(vector<string> &A) {
    int n=A.size();
    int m=A[0].size();
    int cnt=0;
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(A[i][j]=='X'){
                dfs(i,j,n,m,A);
                cnt++;
            }
        }
    }
    return cnt;
}


26) Largest distance between nodes of a tree (basically diameter of a tree)

Given an arbitrary unweighted rooted tree which consists of N nodes.
The goal of the problem is to find largest distance between two nodes in a tree.
Distance between two nodes is a number of edges on a path between the nodes (there will be a unique path between any pair of nodes since it is a tree).
The nodes will be numbered 0 through N - 1.
The tree is given as an array A, there is an edge between nodes A[i] and i (0 <= i < N). Exactly one of the i's will have A[i] equal to -1, it will be root node.

A = [-1, 0, 0, 0, 3]

3

int n;
 
pair<int,int> bfs(int u,vector<int>*adj){
    int dis[n];
    memset(dis,-1,sizeof(dis));
    queue<int>q;
    q.push(u);
    dis[u]=0;
    int node=0;
    while(!q.empty()){
        int x=q.front();
        q.pop();
        for(auto v:adj[x]){
            if(dis[v]==-1) {
            q.push(v);
            dis[v]=dis[x]+1;
            }
        }
    }
    int mx=0;
    for(int i=0;i<n;i++){
        if(dis[i]>mx){
            mx=dis[i];
            node=i;
        }
    }
    return {node,mx};
}
 
int Solution::solve(vector<int> &A){
    n=A.size();
    vector<int>adj[n];
    for(int i=0;i<n;i++){
        if(A[i]==-1) continue;
        adj[A[i]].push_back(i);
        adj[i].push_back(A[i]);
    }
    pair<int,int>t1,t2;
    t1=bfs(0,adj);		//key point
    t2=bfs(t1.first,adj);
    return t2.second;
}
 


27) Stepping numbers (Done)

Given A and B you have to find all stepping numbers in range A to B.

The stepping number:

A number is called as a stepping number if the adjacent digits have a difference of 1.

e.g. 123 is stepping number, but 358 is not a stepping number

void step(int A, int B, vector<int>& sol, long long int num){
    if(num > B){
        return;
    }
    
    int last = num%10;
    
    if(num >= A){
        sol.push_back(num);
    }
    
    if(last == 0){
        step(A, B, sol, num*10 + 1);
    }
    else if(last == 9){
        step(A, B, sol, num*10 + 8);
    }
    else{
        step(A, B, sol, num*10 + last - 1);
        step(A, B, sol, num*10 + last + 1);
    }
}
 
vector<int> Solution::stepnum(int A, int B) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    
    vector<int> sol;
    vector<int> a;
    vector<int> b;
    
    if(A > B){
        return sol;
    }
    
    if(A == 0){
        sol.push_back(0);
    }
    
    for(int i = 1; i < 10; i++){
        step(A, B, sol, (long long int)i);
    }
    
    if(sol.size() != 0){
        sort(sol.begin(), sol.end());
    }
    
    return sol;
}


28) Capture regions on boards (Done)

Given a 2D character matrix A of size N x M, containing 'X' and 'O', capture all regions surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.


Input 1:

 A = [  [X, X, X, X],
        [X, O, O, X],
        [X, X, O, X],
        [X, O, X, X]
     ]


Example Output
Output 1:

 A = [  [X, X, X, X],
        [X, X, X, X],
        [X, X, X, X],
        [X, O, X, X]
     ]


bool issafe(int i,int j,int n,int m,vector<vector<char> > &A){
    if(i<0 || j<0 || i>=n || j>=m || A[i][j]=='X' || A[i][j]=='Z') return false;
    return true;
}
 
void dfs(int i,int j,int n,int m,vector<vector<char> > &A){
    if(issafe(i,j,n,m,A)){
        A[i][j]='Z';
        dfs(i+1,j,n,m,A);
        dfs(i-1,j,n,m,A);
        dfs(i,j-1,n,m,A);
        dfs(i,j+1,n,m,A);
    }
}
 
void Solution::solve(vector<vector<char> > &A) {
    int n=A.size();
    int m=A[0].size();
    for(int i=0;i<n;i++){		//convert all the cells containing 'O' on the four border side cells and cells adjacent to them to 'Z'
        if(A[i][0]=='O')
        dfs(i,0,n,m,A);
        if(A[i][m-1]=='O')
        dfs(i,m-1,n,m,A);
    }
    for(int i=0;i<m;i++){
        if(A[0][i]=='O')
        dfs(0,i,n,m,A);
        if(A[n-1][i])
        dfs(n-1,i,n,m,A);
    }
    for(int i=0;i<n;i++){		//Now the remaining cells which contains 'O' are sorrounded by 'X' and need to be converted into 'X' and the cells which we made 'Z' need to be converted into 'O' again
        for(int j=0;j<m;j++){
            if(A[i][j]=='O')
            A[i][j]='X';
            if(A[i][j]=='Z')
            A[i][j]='O';
        }
    }
}
