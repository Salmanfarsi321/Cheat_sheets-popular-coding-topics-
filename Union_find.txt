				----------------------------------------Union Find----------------------------------------------

1)Longest consecutive sequence

  int find(int i,vector<int>& parent){
        if(parent[i]!=i){
            parent[i] = find(parent[i],parent);
        }
        return parent[i];
    }
    
    void my_union(int x,int y,vector<int>& parent,vector<int>& rnk){
        int a = find(x,parent);
        int b = find(y,parent);
        if(a!=b){
            if(rnk[a] < rnk[b]) swap(a,b);
            parent[b] = a;
            if(rnk[a] == rnk[b]) rnk[a]++;
        }
    }
    
public:
    int longestConsecutive(vector<int>& nums) 
    {
        int n = nums.size();
        unordered_map<int,int>mp;
        vector<int>parent(n);
        for(int i=0;i<n;i++) parent[i] = i;
        vector<int>rnk(n,0);
        for(int i=0;i<nums.size();i++){
            if(mp.find(nums[i]) != mp.end()) continue;
            mp[nums[i]] = i;
            if(mp.find(nums[i]+1) != mp.end())
                my_union(i,mp[nums[i]+1],parent,rnk);
            if(mp.find(nums[i]-1) != mp.end())
                my_union(i,mp[nums[i]-1],parent,rnk);
        }
        int mx = 0;
        vector<int>count(n+1,0);
        for(int i=0;i<n;i++) {
            cout<<parent[i]<<" ";
            count[parent[i]]++;
            mx = max(mx,count[parent[i]]);
        }
        return mx;
    }


Que: Redundant connection

In this problem, a tree is an undirected graph that is connected and has no cycles.

The given input is a graph that started as a tree with N nodes (with distinct values 1, 2, ..., N), with one additional edge added. The added edge has two different vertices chosen from 1 to N, and was not an edge that already existed.

The resulting graph is given as a 2D-array of edges. Each element of edges is a pair [u, v] with u < v, that represents an undirected edge connecting nodes u and v.

Return an edge that can be removed so that the resulting graph is a tree of N nodes. If there are multiple answers, return the answer that occurs last in the given 2D-array. The answer edge [u, v] should be in the same format, with u < v.

Example 1:
Input: [[1,2], [1,3], [2,3]]
Output: [2,3]
Explanation: The given undirected graph will be like this:
  1
 / \
2 - 3
Example 2:
Input: [[1,2], [2,3], [3,4], [1,4], [1,5]]
Output: [1,4]
Explanation: The given undirected graph will be like this:
5 - 1 - 2
    |   |
    4 - 3


class Solution {
    
    int find(int i,vector<int>& parent){
        if(parent[i]!=i){
            parent[i] = find(parent[i],parent);
        }
        return parent[i];
    }
    
    void my_union(int x,int y,vector<int>& parent,vector<int>& rnk){
        int a = find(x,parent);
        int b = find(y,parent);
        if(a!=b){
            if(rnk[a] < rnk[b]) swap(a,b);
            parent[b] = a;
            if(rnk[a] == rnk[b]) rnk[a]++;
        }
    }
        
public:
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        vector<int>res;
        int n = edges.size();
        vector<int>parent(n+1,-1);
        for(int i=0;i<=n;i++) parent[i] = i;
        vector<int>rnk(n+1,0);
        for(int i=0;i<edges.size();i++){
            int u = edges[i][0];
            int v = edges[i][1];
            if(find(u,parent) == find(v,parent)) {
                res.push_back(u);
                res.push_back(v);
                break;
            }
            my_union(u,v,parent,rnk);
        }
        return res;
    }
};
