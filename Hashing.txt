
------------------------------------------------------------------------------Hashing--------------------------------------------------------------------------------

(1)Colorful number

For Given Number N find if its COLORFUL number or not

Return 0/1

COLORFUL number:

A number can be broken into different contiguous sub-subsequence parts. 
Suppose, a number 3245 can be broken into parts like 3 2 4 5 32 24 45 324 245. 
And this number is a COLORFUL number, since product of every digit of a contiguous subsequence is different
Example:

N = 23
2 3 23
2 -> 2
3 -> 3
23 -> 6
this number is a COLORFUL number since product of every digit of a sub-sequence are different. 

Output : 1

int Solution::colorful(int A) {
    string num = to_string(A);
    unordered_map<long long, bool>hash;
    for(int i=0;i<num.length();i++) {
        long long mul = 1;
        for(int j=i;j<num.length();j++){
            mul*=(num[j]-'0');
            if(hash.find(mul)!=hash.end())
                return 0;
            hash[mul]=true;
        }
    }
    return 1;
}

(2)Largest continuous sequence with zero sum

vector<int> Solution::lszero(vector<int> &A) {
    unordered_map<int,int>mp;
    vector<int>res;
    int sum=0,start=0,end=-1,ans=0;
    for(int i=0;i<A.size();i++){
        sum+=A[i];
        if(sum==0){
            if(ans<i+1){
                ans=i+1;
                start=0;
                end=i;
            }
        }
        if(mp.find(sum)!=mp.end())
        {
            if(ans<i-mp[sum]){
                ans=i-mp[sum];
                start=mp[sum]+1;
                end=i;
            }
        }
        else
        mp[sum]=i;
    }
    if(end==-1) return res;
    for(int i=start;i<=end;i++) res.push_back(A[i]);
    return res;
}

(3) 2 Sum

Given an array of integers, find two numbers such that they add up to a specific target number.

The function twoSum should return indices of the two numbers such that they add up to the target, where index1 < index2. 
Please note that your returned answers (both index1 and index2 ) are not zero-based.
If multiple solutions exist, output the one where index2 is minimum. If there are multiple solutions with the minimum index2, choose the one with minimum index1 out of them.

Input: [2, 7, 11, 15], target=9
Output: index1 = 1, index2 = 2

vector<int> Solution::twoSum(const vector<int> &A, int B) {
    vector<int>res;
    unordered_map<int,int>mp;
    for(int i=0;i<A.size();i++){
        if(mp.find(B-A[i])!=mp.end())
        {
            res.push_back(mp[B-A[i]]+1);
            res.push_back(i+1);
            break;
        }
        else{
            if(mp.find(A[i])==mp.end())
            mp[A[i]]=i;
        }
    }
    return res;
}


(4) 4 Sum

vector<vector<int> > Solution::fourSum(vector<int> &A, int B) {
    vector<vector<int> >res;
    sort(A.begin(),A.end());
    int n=A.size();
    for(int i=0;i<n-3;i++){
        if(i>0 && A[i]==A[i-1]) continue;
        for(int j=i+1;j<n-2;j++){
            if(j>i+1 && A[j]==A[j-1]) continue;
            int ptr1=j+1,ptr2=n-1;
            while(ptr1<ptr2){
                int val=A[i]+A[j]+A[ptr1]+A[ptr2];
                if(val==B){
                    vector<int>ans;
                    ans.push_back(A[i]);
                    ans.push_back(A[j]);
                    ans.push_back(A[ptr1]);
                    ans.push_back(A[ptr2]);
                    res.push_back(ans);
                    ++ptr1;
                    while(ptr1<ptr2 && A[ptr1]==A[ptr1-1]) ++ptr1;
                }
                else if(val>B) ptr2--;
                else if(val<B) ptr1++;
            }
        }
    }
    return res;
}


(5) Valid sudoku

int Solution::isValidSudoku(const vector<string> &A) {
    int row[9][9]={0},col[9][9]={0},cube[9][9]={0};
    for(int i=0;i<A.size();i++){
        for(int j=0;j<A.size();j++){
            if(A[i][j]!='.'){
            int ch=A[i][j]-'0'-1;
            int k=i/3*3+j/3;
            if(row[i][ch]++ || col[ch][j]++ || cube[k][ch]++)
            return false;
            }
        }
    }
    return true;
}


(6) Diffk2

Given an array A of integers and another non negative integer k, find if there exists 2 indices i and j such that A[i] - A[j] = k, i != j.

Example :

Input :

A : [1 5 3]
k : 2

ouput:1

int Solution::diffPossible(const vector<int> &A, int B) {
    unordered_map<int,int>mp;
    for(int i=0;i<A.size();i++){
        if(mp.find(A[i])==mp.end())
        mp[A[i]]=1;
        else
        mp[A[i]]=2;
    }
    for(auto it=mp.begin();it!=mp.end();it++){
        int val=it->first-B;
        if(mp.find(val)!=mp.end()){
            if(mp.find(val)!=it)
            return 1;
            else
            {
                if(it->second>1)
                return 1;
            }
        }
    }
    return 0;
}

(7)Number of Pairs with given XOR

Given an 1D integer array A containing N distinct integers.

Find the number of unique pairs of integers in the array whose XOR is equal to B.

NOTE:

Pair (a, b) and (b, a) is considered to be same and should be counted once.

int Solution::solve(vector<int> &A, int B) {
    unordered_map<int,int>mp;
    int cnt=0;
    for(int i=0;i<A.size();i++){
        if(mp.find(A[i]^B)!=mp.end()){
            cnt++;
        }
        else
        mp[A[i]] = 1;
    }
    return cnt;
}

















#checkpoint question
Largest consecutive sequence

Given an unsorted array of integers, find the length of the longest consecutive elements sequence.

Example:
Given [100, 4, 200, 1, 3, 2],
The longest consecutive elements sequence is [1, 2, 3, 4]. Return its length: 4.

Your algorithm should run in O(n) complexity.

int Solution::longestConsecutive(const vector<int> &A) {
    map<int,int>mp;
    for(int i=0;i<A.size();i++) mp[A[i]]++;
    int prev=0,ans=0,cnt=1;
    for(auto it=mp.begin();it!=mp.end();it++){
        if(it->second && prev){
            if(it->first - prev == 1)
            cnt++;
            else
            cnt = 1;
        }
        if(it->second)
        prev = it->first;
        ans = max(ans,cnt);
    }
    return ans;
}
