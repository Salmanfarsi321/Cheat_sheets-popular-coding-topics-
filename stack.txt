
-----------------------------------------------------------------------stack interviewbit-----------------------------------------------------------------------

Que1: Simplify string

string simplify(string A) 
{ 
    stack<string> st; 
    string dir; 
    string res; 
    res+="/";
    int len_A = A.length(); 
    for (int i = 0; i < len_A; i++) { 
        dir.clear(); 
        while (A[i] == '/') 				// skip all the multiple '/' Eg. "/////"" 
            i++; 
        while (i < len_A && A[i] != '/') { 		// stores directory's name("a", "b" etc.) 
       							// or commands("."/"..") into dir 
            dir.push_back(A[i]); 
            i++; 
        } 
        if (dir.compare("..") == 0) { 
            if (!st.empty())  
                st.pop();             
        } 
        else if (dir.compare(".") == 0)  
            continue; 
        else if (dir.length() != 0)  
            st.push(dir);         
    } 
    stack<string> st1; 					// a temporary stack  (st1) which will contain  
    while (!st.empty()) { 				// the reverse of original stack(st). 
        st1.push(st.top()); 
        st.pop(); 
    } 
    while (!st1.empty()) { 
        string temp = st1.top(); 
          
        // if it's the last element no need 
        // to append "/" 
        if (st1.size() != 1) 
            res.append(temp + "/"); 
        else
            res.append(temp); 
  
        st1.pop(); 
    } 
  
    return res; 
} 

Que2: Redundant braces

int Solution::braces(string str) {
    stack<char>stk;
    for(int i=0;i<str.size();i++){
        if(str[i]==')'){
            bool flag=true;
            while(!stk.empty() && stk.top()!='('){
                char ch=stk.top();
                if(ch=='+' || ch=='-' || ch=='*' || ch=='/')
                flag=false;
                stk.pop();
            }
            if(flag==true) return 1;
            stk.pop();
        }
        else
        stk.push(str[i]);
    }
    return 0;
}

Que3: Next smaller element left

Given an array, find the nearest smaller element G[i] for every element A[i] in the array such that the element has an index smaller than i.

vector<int> Solution::prevSmaller(vector<int> &A) {
    vector<int>ans;
    stack<int>s;
    for(int i=0;i<A.size();i++){
        while(!s.empty() && A[s.top()]>=A[i]){
            s.pop();
        }
        if(s.empty()){
            ans.push_back(-1);
        }
        else{
            ans.push_back(A[s.top()]);
        }
        s.push(i);
    }
    return ans;
}

Que4: Largest rectangle in a histogram

void nextsmallerleft(vector<int>& hist,vector<int>&left){
    stack<pair<int,int> >s;
    for(int i=0;i<hist.size();i++){
        while(!s.empty() && s.top().first>=hist[i])
        s.pop();
        if(s.empty()) left.push_back(-1);
        else
        left.push_back(s.top().second);
        s.push({hist[i],i});
    }
}

void nextsmallerright(vector<int>& hist,vector<int>&right){
    stack<pair<int,int> >s;
    for(int i=hist.size()-1;i>=0;i--){
        while(!s.empty() && s.top().first>=hist[i])
        s.pop();
        if(s.empty()) right.push_back(hist.size());
        else
        right.push_back(s.top().second);
        s.push({hist[i],i});
    }
    reverse(right.begin(),right.end());
}

int Solution::largestRectangleArea(vector<int> &hist) {
     vector<int>left;
     vector<int>right;
     nextsmallerleft(hist,left);
     nextsmallerright(hist,right);
     int res,mx=0;
     for(int i=0;i<hist.size();i++){
         res=hist[i]*(right[i]-left[i]-1);
         mx=max(mx,res);
     }
    return mx;
}

Que5: Sliding window maximum  (Actually it comes in queue section)

vector<int> Solution::slidingMaximum(const vector<int> &A, int k) {
    int n=A.size();
    vector<int>ans;
    deque<int>dq;
    for(int i=0;i<k;i++){
        while(!dq.empty() && A[dq.back()]<=A[i]){
            dq.pop_back();
        }
        dq.push_back(i);
    }
    for(int i=k;i<n;i++){
        ans.push_back(A[dq.front()]);
        while(!dq.empty() && dq.front()<=i-k)
        dq.pop_front();
        while(!dq.empty() && A[dq.back()]<=A[i]){
            dq.pop_back();
        }
        dq.push_back(i);
    }
    ans.push_back(A[dq.front()]);
    return ans;
}

Que6:Evaluate expression

int Solution::evalRPN(vector<string> &A) {
    stack<int>s;
    for(int i=0;i<A.size();i++){
        if(A[i]!="+" && A[i]!="-" && A[i]!="/" && A[i]!="*"){
            int val=stoi(A[i]);
            s.push(val);
        }
        else{
            int a=s.top();
            s.pop();
            int b=s.top();
            s.pop();
            if(A[i]=="+")  s.push(b+a);
            if(A[i]=="-")  s.push(b-a);
            if(A[i]=="*")  s.push(b*a);
            if(A[i]=="/")  s.push(b/a);
        }
    }
    return s.top();
}

Que7:Rain water trapped

int Solution::trap(const vector<int> &A) {
    int n=A.size();
    vector<int>left(n);
    vector<int>right(n);
    left[0]=A[0];
    for(int i=1;i<A.size();i++){
        left[i]=max(left[i-1],A[i]);
    }
    right[n-1]=A[n-1];
    for(int i=n-2;i>=0;i--){
        right[i]=max(right[i+1],A[i]);
    }
    int ans=0;
    for(int i=0;i<n;i++){
        ans+=min(right[i],left[i])-A[i];
    }
    return ans;
}



Que8: Min stack in O(1) space                         <---------most important-------------->

stack<int>s;
int minEle;

MinStack::MinStack() {
   while(!s.empty())
   s.pop();
}

void MinStack::push(int x) {
    if(s.size()==0){
        s.push(x);
        minEle=x;
    }
    else{
        if(x>=minEle){
            s.push(x);
        }
        else{
            s.push(2*x-minEle);
            minEle=x;
        }
    }
}

void MinStack::pop() {
    if(s.size()==0) return;
    else{
        if(s.top()>=minEle)
        s.pop();
        else{
        minEle=2*minEle-s.top();
        s.pop();
        }
    }
}

int MinStack::top() {
    if(s.size()==0) return -1;
    else{
        if(s.top()>=minEle)
        return s.top();
        else
        return minEle;
    }
}

int MinStack::getMin() {
    if(s.size()==0) return -1;
    return minEle;
}


------------------------------------------------------------------------------stack geeksforgeeks-------------------------------------------------------------------
Que9:stock span problem

#include<bits/stdc++.h>
using namespace std;
int main()
{
	int t;
	cin>>t;
	while(t--){
	    int n;
	    cin>>n;
	    vector<int>a(n);
	    for(int i=0;i<n;i++) cin>>a[i];
	    stack<pair<int,int> >stk;
	    for(int i=0;i<n;i++){
	        while(!stk.empty() && stk.top().first<=a[i])
	        stk.pop();
	        if(stk.empty())
	        cout<<i+1<<" ";
	        else
	        cout<<i-stk.top().second<<" ";
	        stk.push({a[i],i});
	    }
	    cout<<"\n";
	}
	return 0;
}

Que10:Next larger element

#include<bits/stdc++.h>
using namespace std;
#define ll long long

int main()
{
	int t;
	cin>>t;
	while(t--){
	    ll n;
	    cin>>n;
	    vector<ll>a(n);
	    for(int i=0;i<n;i++) cin>>a[i];
	    stack<ll>stk;
	    vector<ll>res;
	    for(int i=n-1;i>=0;i--){
	        while(!stk.empty() && stk.top()<=a[i])
	        stk.pop();
	        if(stk.empty())
	        res.push_back(-1);
	        else
	        res.push_back(stk.top());
	        stk.push(a[i]);
	    }
	    reverse(res.begin(),res.end());
	    for(int i=0;i<res.size();i++) cout<<res[i]<<" ";
	    cout<<"\n";
	}
	return 0;
}

Que11:Max rectangle in a binary matrix (leetcode)

int max_area_histogram(vector<int>v){
    stack<pair<int,int> >stk;
    int n=v.size();
    vector<int>left;
    vector<int>right;
    //next smaller element left
    for(int i=0;i<v.size();i++){
        while(!stk.empty() && stk.top().first>=v[i])
        stk.pop();
        if(stk.empty())
        left.push_back(-1);
        else
        left.push_back(stk.top().second);
        stk.push({v[i],i});
    }
    while(!stk.empty()) stk.pop();
    //next smaller element right
    for(int i=n-1;i>=0;i--){
        while(!stk.empty() && stk.top().first>=v[i])
        stk.pop();
        if(stk.empty()) right.push_back(n);
        else
        right.push_back(stk.top().second);
        stk.push({v[i],i});
    }
    reverse(right.begin(),right.end());
    int mx=0;
    for(int i=0;i<n;i++){
        int val=(right[i]-left[i]-1)*v[i];
        mx=max(mx,val);
    }
    return mx;
}
public:
    int maximalRectangle(vector<vector<char>>& M) {
    int ans=0;
    int n=M.size();
    if(n==0) return 0;
    int m=M[0].size();
    vector<int>v(m,0);
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(M[i][j]=='0')
            v[j]=0;
            else
            v[j]+=M[i][j]-'0';
        }
        ans=max(ans,max_area_histogram(v));
    }
    return ans;
    }

Que12:Maximum rectangular area in a histogram

#include<bits/stdc++.h>
using namespace std;
#define ll long long


ll max_area_histogram(vector<ll>v){
    stack<pair<ll,ll> >stk;
    int n=v.size();
    vector<ll>left;
    vector<ll>right;
    //next smaller element left
    for(int i=0;i<v.size();i++){
        while(!stk.empty() && stk.top().first>=v[i])
        stk.pop();
        if(stk.empty())
        left.push_back(-1);
        else
        left.push_back(stk.top().second);
        stk.push({v[i],i});
    }
    while(!stk.empty()) stk.pop();
    //next smaller element right
    for(int i=n-1;i>=0;i--){
        while(!stk.empty() && stk.top().first>=v[i])
        stk.pop();
        if(stk.empty()) right.push_back(n);
        else
        right.push_back(stk.top().second);
        stk.push({v[i],i});
    }
    reverse(right.begin(),right.end());
    ll mx=0;
    for(int i=0;i<n;i++){
        ll val=(right[i]-left[i]-1)*v[i];
        mx=max(mx,val);
    }
    return mx;
}

int main()
{
	int t;
	cin>>t;
	while(t--)
	{
	    ll n;
	    cin>>n;
	    vector<ll>v(n);
	    for(int i=0;i<n;i++) cin>>v[i];
	    cout<<max_area_histogram(v)<<"\n";
	}
	return 0;
}

Que13:Longest valid parenthesis  (dp approach) beautiful solution

#include<bits/stdc++.h>
using namespace std;
int main()
{
	int t;
	cin>>t;
	while(t--){
	    string str;
	    cin>>str;
	    int n=str.size();
	    vector<int>dp(n,0);
	    int mx=0;
	    for(int i=1;i<str.size();i++){
	        if(str[i]=='(') dp[i]=0;
	        else{
	            if(str[i-1]=='(') dp[i]=2+((i-2)>=0 ? dp[i-2]:0);
	            else if(i-dp[i-1]>=1 && str[i-dp[i-1]-1]=='(')
	            dp[i]=dp[i-1]+2+((i-dp[i-1]-2>=0) ? dp[i-dp[i-1]-2]:0);
	        }
	        mx=max(mx,dp[i]);
	    }
	    cout<<mx<<"\n";
	}
	return 0;
}

Que13:Longest valid parenthesis (stack based approach)

 int longestValidParentheses(string s) 
    {
        int n=s.size();
        stack<int>stk;
        int mx=0;
        stk.push(-1);
        for(int i=0;i<n;i++)
        {
            if(s[i]=='(')
                stk.push(i);
            else
            {
                stk.pop();
                if(stk.empty())
                    stk.push(i);
                else
                {
                    mx=max(mx,i-stk.top());
                }
            }
        }
        return mx;
   }


Que14:Print bracket number

#include<bits/stdc++.h>
using namespace std;
int main()
{
	int t;
	cin>>t;
	while(t--){
	    string str;
	    cin>>str;
	    stack<int>stk;
	    int k=0;
	    vector<int>res;
	    for(int i=0;i<str.size();i++){
            if(str[i]=='('){
                k++;
                stk.push(k);
                res.push_back(k);
            }
            else if(str[i]==')'){
                int x=stk.top();
                stk.pop();
                res.push_back(x);
            }
	    }
	    for(int i=0;i<res.size();i++) cout<<res[i]<<" ";
	    cout<<"\n";
	}
	return 0;
}

Que15: Maximum of minimum for every window size		(very nice problem)

#include<bits/stdc++.h>
using namespace std;
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
	    int n;
	    cin>>n;
	    vector<int>a(n);
	    for(int i=0;i<n;i++) cin>>a[i];
	    vector<int>left;
	    vector<int>right;
	    vector<int>ans(n+1,0);
	    stack<int>stk;
	    for(int i=0;i<n;i++){
	        while(!stk.empty() && a[stk.top()]>=a[i]){		//next smaller left
	            stk.pop();
	        }
	        if(stk.empty())
	        left.push_back(-1);
	        else
	        left.push_back(stk.top());
	        stk.push(i);
	    }
	    while(!stk.empty()) stk.pop();
	    for(int i=n-1;i>=0;i--){
	        while(!stk.empty() && a[stk.top()]>=a[i]){		//next smaller right
	            stk.pop();
	        }
	        if(stk.empty())
	        right.push_back(n);
	        else
	        right.push_back(stk.top());
	        stk.push(i);
	    }
	    reverse(right.begin(),right.end());
	    for(int i=0;i<n;i++){				
	        int len=right[i]-left[i]-1;		 //we know that arr[i] is a minimum of a window of length “right[i] – left[i] – 1”. 
	        ans[len]=max(ans[len],a[i]);
	    }
	    for(int i=n-1;i>=0;i--){			// Result for length i, i.e. ans[i] would always be greater or same as result for length i+1, i.e., ans[i+1].
	        ans[i]=max(ans[i+1],ans[i]);
	    }
	    for(int i=1;i<=n;i++) cout<<ans[i]<<" ";
	    cout<<"\n";
	}
	return 0;
}

Que16: The celebrity problem 

Approach:If A knows B, then A can’t be a celebrity. Discard A, and B may be celebrity.
If A doesn’t know B, then B can’t be a celebrity. Discard B, and A may be celebrity.

int getId(int M[MAX][MAX], int n)
{
    //Your code here
    stack<int>stk;
    for(int i=0;i<n;i++)
    {
        stk.push(i); 
    }
    while(stk.size()>1)
    {
        int a=stk.top();
        stk.pop();
        int b=stk.top();
        stk.pop();
        if(M[a][b]==1) 
        stk.push(b);
        else
        stk.push(a);
    }
    int x=stk.top();
    for(int j=0;j<n;j++)
    {
        if(x!=j && M[x][j]==1) return -1;
    }
    for(int i=0;i<n;i++)
    {
        if(x!=i && M[i][x]!=1) return -1;
    }
    return x;
}


Que17: Count of submatrices with all ones (i.e histograms count)

Given a rows * columns matrix mat of ones and zeros, return how many submatrices have all ones.
Example 1:

Input: mat = [[1,0,1],
              [1,1,0],
              [1,1,0]]
Output: 13

int helper(vector<int>& h){
        int n=h.size();
        stack<int>stk;
        vector<int>sum(n);
        for(int i=0;i<n;i++){
            while(!stk.empty() && h[stk.top()] >= h[i])
                stk.pop();
            if(!stk.empty()){
                int prev_smaller_idx = stk.top();
                sum[i] = sum[prev_smaller_idx];
                sum[i] += h[i]*(i-prev_smaller_idx);
            }
            else
                sum[i] = h[i]*(i+1);
            stk.push(i);
        }
        int ans=0;
        for(int i=0;i<n;i++) ans+=sum[i];
        return ans;
    }
    
public:
    int numSubmat(vector<vector<int>>& a) {
        int m=a.size(); //row
        int n=a[0].size(); //column
        int res=0;
        vector<int>h(n);
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(a[i][j] == 0)
                    h[j] = 0;
                else
                    h[j] = h[j] + 1;
            }
            res += helper(h);
        }
        return res;
    }