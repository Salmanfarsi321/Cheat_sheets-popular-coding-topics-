
--------------------------------------------------------------------------string (geeks for geeks)-----------------------------------------------------------------

(1) Reverse a string using recursion ->O(n)

#include <iostream>
using namespace std;

void reverse(string str){
	if(str.size() == 0)
	return;
	reverse(str.substr(1));
	cout<<str[0]<<" ";
}

int main() {
	string str;
	cin>>str;
	reverse(str);
	return 0;
}

//iterative
#include <iostream>
using namespace std;

int main() {
	string str;
	cin>>str;
	int start=0,end=str.size()-1;
	while(start < end){
		string temp = str[start];
		str[start] = str[end];
		str[end] = temp;
		start++;
		end--;
	}
	cout<<str<<endl;
	return 0;
}


(2) Permutations of a given string

#include<bits/stdc++.h>
using namespace std;

void fun(string str,vector<string>& res,int idx,int n){
    if(idx>=n){
        res.push_back(str);
        return;
    }
    for(int i=idx;i<=n;i++){
        swap(str[i],str[idx]);
        fun(str,res,idx+1,n);
        swap(str[i],str[idx]);
    }
}

int main()
{
	int t;
	cin>>t;
	while(t--)
	{
        string str;
        cin>>str;
        vector<string>res;
        fun(str,res,0,str.size()-1);
        sort(res.begin(),res.end());
        for(int i=0;i<res.size();i++) cout<<res[i]<<" ";
        cout<<endl;
	}
	return 0;
}

(3) Find index of first non repeating character (easy,good one) ->By doing only single traversal

#include<bits/stdc++.h>
using namespace std;


int main()
{
	int t;
	cin>>t;
	while(t--)
	{
	    int n;
	    cin>>n;
	    string str;
	    cin>>str;
	    pair<int,int>h[256];
	    for(int i=0;i<str.size();i++){
	        h[str[i]-'a'].first++;
	        h[str[i]-'a'].second=i;
	    }
	    int res=INT_MAX;
	    for(int i=0;i<256;i++){
	        if(h[i].first == 1)
	        res = min(res,h[i].second);
	        //cout<<h[i].first<<" "<<h[i].second<<endl;
	    }
	    //cout<<res<<" ";
	    if(res == INT_MAX) cout<<"-1"<<endl;
	    else
	    cout<<str[res]<<endl;
	}
	return 0;
}

(4) Reverse words in a given string	(easy,nice)

#include<bits/stdc++.h>
using namespace std;
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
	    string str;
	    cin>>str;
	    vector<string>v;
	    string res="";
	    int flag=0;
	    for(int i=0;i<str.size();i++){
	        if(str[i] == '.'){
	            if(flag==1)
	            res.push_back(str[i]);
	            flag=1;
	            v.push_back(res);
	            res="";
	        }
	        else
	        res.push_back(str[i]);
	    }
	    if(flag == 1)
	    v.push_back(".");
	    v.push_back(res);
	    reverse(v.begin(),v.end());
	    for(int i=0;i<v.size();i++) cout<<v[i];
	    cout<<endl;
	}
	return 0;
}


(5) Print all the duplicates in the input string
Write an efficient C program to print all the duplicates and their counts in the input string

Algorithm: Let input string be “geeksforgeeks”
1: Construct character count array from the input string.

count[‘e’] = 4
count[‘g’] = 2
count[‘k’] = 2
……

2: Print all the indexes from the constructed array which have value greater than 1.

(6) Consecutive elements removal		(easy)

#include<bits/stdc++.h>
using namespace std;
int main()
{
	int t;
	cin>>t;
	while(t--){
	    string str;
	    cin>>str;
	    string ans="";
	    for(int i=0;i<str.size();i++){
	        while(str[i] == str[i+1]){
	            i++;
	        }
	        ans+=str[i];
	    }
	    cout<<ans<<endl;
	}
	return 0;
}


(6) Sorted permutation rank or lexographic rank of a string	(very important ,nice one)

const int mod = 1e6+3;

int Solution::findRank(string str) {
    vector<long long>fact(80,0);
    fact[0]=1;
    for(int i=1;i<=80;i++){
        fact[i] = (fact[i-1]*i)%mod;
    }
    long long ans=0;
    int n=str.size();
    for(int i=0;i<str.size();i++){
        long long cnt=0;
        for(int j=i+1;j<str.size();j++){
            if(str[i] > str[j]){
                cnt++;
            }
        }
        ans += (fact[n-i-1]*cnt)%mod;
    }
    return (ans+1)%mod;
}


(7) Run length encoding

2
aaaabbbccc
abbbcdddd

Output
a4b3c3
a1b3c1d4

char *encode(char *src){    
    int len = strlen(src);
    char* ans=(char *)malloc(sizeof(char)*(2*len+1));
    vector<int>count(26,0);
    int j=0;
    for(int i=0;i<len;i++){
        count[src[i]-'a']++;
        if(src[i]!=src[i+1]){
        ans[j++]=src[i];
        ans[j++]=(char )(count[src[i]-'a']+48);
        count[src[i]-'a'] = 0;
        }
    }
    ans[j]='\0';
    return ans;
}   


(8) Atoi

int Solution::atoi(const string A) {
    int i=0,ans=0,sign=1;
    while(i<A.size() && A[i]==' ' )
    i++;
    if(A[i]=='-' || A[i]=='+'){
        sign = (A[i++]=='-') ? -1 : 1;
    }
    while(i<A.size() && A[i]>='0' && A[i]<='9' ){
    if(ans> INT_MAX/10 || (ans==INT_MAX/10 && A[i]-'0'>7)){
        if(sign==1) return INT_MAX;
        else
        return INT_MIN;
    }
    ans=ans*10+(A[i]-'0');
    i++;
    }
    return ans;
}

 
(9) Remove from string1 all characters that are present in second string

#include<bits/stdc++.h>
using namespace std;
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
	    string s1;
	    cin>>s1;
	    string s2;
	    cin>>s2;
	    map<char,int>mp;
	    for(int i=0;i<s2.size();i++){
	        mp.insert({s2[i],i+1});
	    }
	    string ans="";
	    for(int i=0;i<s1.size();i++){
	        if(mp.find(s1[i])==mp.end()){
	            ans+=s1[i];
	        }
	    }
	    cout<<ans<<endl;
	}
	return 0;
}

(10) Check whether two strings are anagram of each other

#include<bits/stdc++.h>
using namespace std;
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
	    string str1,str2;
	    cin>>str1>>str2;
	    vector<int>cnt1(26,0);
	    vector<int>cnt2(26,0);
	    bool flag = true;
	    for(int i=0;i<str1.size();i++) cnt1[str1[i]-'a']++;
	    for(int i=0;i<str2.size();i++) cnt2[str2[i]-'a']++;
	    for(int i=0;i<26;i++){
	        if(cnt1[i]!=cnt2[i]){
	            flag = false;
	            break;
	        }
	    }
	    if(flag) cout<<"YES"<<endl;
	    else
	    cout<<"NO"<<endl;
	}
	return 0;
}

(11) Length of the longest substring without repeating characters  ------> important

#include<bits/stdc++.h>
using namespace std;
int main()
{
	int t;
	cin>>t;
	while(t--){
	    string str;
	    cin>>str;
	    int i=0,j=0,n=str.size();
	    vector<int>mp(256,-1);
	    int len=0;
	    while(j<n){
	        i=max(i,mp[str[j]]+1);
	        mp[str[j]] = j;
	        len = max(len,j-i+1);
	        j++;
	    }
	    cout<<len<<endl;
	}
	return 0;
}

(12) Smallest window in a string containing all the characters of another string     ----->important

#include<bits/stdc++.h>
using namespace std;
int main()
{
	int t;
	cin>>t;
	while(t--){
	    string str;
	    cin>>str;
	    string pat;
	    cin>>pat;
	    vector<int>count_str(256,0);
	    vector<int>count_pat(256,0);
	    for(int i=0;i<pat.size();i++){
	           count_pat[pat[i]-'a']++;
	    }
	    int i=0,j=0,start=-1,len=INT_MAX,match=0;
	    while(j<str.size()){
	       count_str[str[j]-'a']++;
	       if(count_pat[str[j]-'a'] != 0 && count_str[str[j]-'a'] <= count_pat[str[j]-'a'])
	            match++;
	       if(match == pat.size()){
	           while(count_str[str[i]-'a'] > count_pat[str[i]-'a']
	           || count_pat[str[i]-'a'] == 0){
	               if(count_str[str[i]-'a'] > count_pat[str[i]-'a'])
	               count_str[str[i]-'a']--;
	               i++;
	           }
	           if(j-i+1<len){
	               len=j-i+1;
	               start = i;
	           }
	       }
	       j++;
	    }
	    if(start == -1) cout<<"-1"<<endl;
	    else
	    cout<<str.substr(start,len)<<endl;
	}
	return 0;
}

(13) Regex match (done in Dp section)


(14) KMP string matching  (more simplified version of masood to implement) --------------> most important


//kmp algo to find whether there is a needle in the haystack
#include<bits/stdc++.h>
using namespace std;

int main()
{
	string str;
	cin>>str;			//haystack
	string pat;
	cin>>pat;			//needle
	int n=str.size();
	int m=pat.size();
	vector<int>f(m,0);
	int j;
	for(int i=1;i<n;i++)
	{
		j=f[i-1];
		while(j>0 && pat[j]!=pat[i])
		{
			j=f[j-1];
		}
		if(pat[i]==pat[j])
		j++;
		f[i]=j;
	}
	int i=0;
	j=0;
	while(i<n)
	{
		if(str[i]==pat[j])
		{
			i++;
			j++;
		}
		if(j==m)
		{
			cout<<"pattern found"<<endl;
			break;
		}
		else if(i<n && str[i]!=pat[j])
		{
			if(j!=0)
			j=f[j-1];
			else
			i++;
		}
	}
	return 0;
}

(15) Longest even length substring

For given string ‘str’ of digits, find length of the longest substring of ‘str’, such that the length of the substring is 2k digits
and sum of left k digits is equal to the sum of right k digits.

Input:
2
000000
1234123

Output:
6
4  
 
#include<bits/stdc++.h>
using namespace std;
int main()
{
	int t;
	cin>>t;
	while(t--){
	    string str;
	    cin>>str;
	    int n = str.size();
	    int len = 0;
	    for(int i=1;i<n;i++){
	        int l=i-1,r=i,left_sum=0,right_sum=0;
	        while(l>=0 && r<n){
	            left_sum += str[l]-'0';
	            right_sum += str[r]-'0';
	            if(left_sum == right_sum){
	                len = max(len,r-l+1);
	            }
	            l--;
	            r++;
	        }
	    }
	    cout<<len<<endl;
	}
	return 0;
}

(16) Longest prefix which is also a proper suffix

Given a string of character, find the length of longest proper prefix which is also a proper suffix.
Example:
S = abab
lps is 2 because, ab.. is prefix and ..ab is also a suffix.

#include<bits/stdc++.h>
using namespace std;
int main()
{
	int t;
	cin>>t;
	while(t--){
	    string str;
	    cin>>str;
	    int n=str.size();
	    vector<int>f(n,0);
	    int j;
	    for(int i=1;i<n;i++){
	        j = f[i-1];
	        while(j>0 && str[j]!=str[i]){
	            j = f[j-1];
	        }
	        if(str[i] == str[j]){
	            j++;
	        }
	        f[i] = j;
	    }
	    cout<<f[n-1]<<endl;
	}
	return 0;
}


(17) Rearrange characters

Given a string S with repeated characters (only lowercase). The task is to rearrange characters in a string such that no two adjacent characters are same

#include<bits/stdc++.h>
using namespace std;
int main()
{
	int t;
	cin>>t;
	while(t--){
	    string str;
	    cin>>str;
	    int n=str.size();
	    vector<int>count(26,0);
	    int flag = 1;
	    for(int i=0;i<str.size();i++){
	        count[str[i]-'a']++;
	    }
	    for(int i=0;i<26;i++){
	        if(count[i] > n/2){
	            flag = 0;
	            break;
	        }
	    }
	    if(flag) cout<<"1\n";
	    else
	    cout<<"0\n";
	}
	return 0;
}


(18) String formation from substring(nice one ---> uses prefix function of kmp)

Given a string ‘str’, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together. 
For example "abab" can be created by appending "ab" to "ab", but "abac" cannot be created by appending a substring to itself.

#include<bits/stdc++.h>
using namespace std;
int main()
{
	int t;
	cin>>t;
	while(t--){
	    string str;
	    cin>>str;
	    int m=str.size();
	    vector<int>f(m,-1);
	    f[0] = 0;
	    //cout<<f[0]<<" ";
	    int j;
	    for(int i=1;i<m;i++){
	        j = f[i-1];
	        while(j>0 && str[i] != str[j])
	            j = f[j-1];
	        if(str[i] == str[j])
	            j++;
	        f[i] = j;
	        //cout<<f[i]<<" ";
	    }
	    int mx_len = f[m-1];
	    if(mx_len>0 && mx_len%(m-mx_len) == 0) cout<<"True\n";
	    else
	    cout<<"False\n";
	}
	return 0;
}


-------------------------------------------------------------(string) Interviewbit------------------------------------------------------------------------------------


(1) Valid IP addresses

bool isvalid(string str){
    if(str.size()>1 && str[0] == '0') return false;    
    int temp = stoi(str);
    if(temp>=0 && temp<=255) return true;
    return false;
}

vector<string> Solution::restoreIpAddresses(string A) {
    int n = A.size();
    vector<string>ans;
    if(A.size()>12 || A.size()<4) return ans;
    for(int i=1;i<4;i++){
        string first = A.substr(0,i);
        if(!isvalid(first))
        continue;
        for(int j=1;i+j<n && j<4;j++){
            string second = A.substr(i,j);
            if(!isvalid(second))
            continue;
            for(int k=1;i+j+k<n && k<4;k++){
                string third = A.substr(i+j,k);
                if(!isvalid(third)) continue;
                string fourth = A.substr(i+j+k);
                if(!isvalid(fourth)) continue;
                ans.push_back(first + "." + second + "." + third + "." + fourth);
            }
        }
    }
    return ans;
}


(2) Compare version numbers (My solution uses additional space O(n+m) ,it can be done without using extra space)

Compare two version numbers version1 and version2.

If version1 > version2 return 1,
If version1 < version2 return -1,
otherwise return 0.
You may assume that the version strings are non-empty and contain only digits and the . character.
The . character does not represent a decimal point and is used to separate number sequences.
For instance, 2.5 is not "two and a half" or "half way to version three", it is the fifth second-level revision of the second first-level revision.

Here is an example of version numbers ordering:

0.1 < 1.1 < 1.2 < 1.13 < 1.13.4


int Solution::compareVersion(string A, string B) {
    int n=A.size(),m=B.size();
    int j=0;
    vector<unsigned long long>v1,v2;
    unsigned long long a=0,b=0;
    for(int i=0;i<n;i++){
        if(A[i] == '.'){
            if(a!=0)
            v1.push_back(a);
            a=0;
        }
        else
            a = a*10 + A[i]-'0';
    }
    if(a!=0)
    v1.push_back(a);
    for(int i=0;i<m;i++){
        if(B[i] == '.'){
            if(b!=0)
            v2.push_back(b);
            b=0;
        }
        else
            b = b*10 + B[i]-'0';
    }
    if(b!=0)
    v2.push_back(b);
    //cout<<v1.size()<<" "<<v2.size()<<endl;
    for(int i=0;i<min(v1.size(),v2.size());i++){
        //cout<<v1[i]<<" "<<v2[i]<<endl;
        if(v1[i]>v2[i]) return 1;
        else if(v1[i]<v2[i]) return -1;
    }
    if(v1.size()>v2.size()) return 1;
    else if(v1.size()<v2.size()) return -1;
    return 0;
}


(3) strstr (kmp needle in a haystack)

Returns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

int Solution::strStr(const string str, const string pat) {
   	int m=pat.size();
    int n=str.size();
    if(m == 0) return -1;
    if(m == 0 && n == 0) return -1;
    string temp = pat + '$' + str;
    int len = temp.size();
    vector<int>f(len,0);
    int j;
    for(int i=1;i<len;i++){
        j = f[i-1];
        while(j>0 && temp[i]!=temp[j]){
            j = f[j-1];
        }
        if(temp[i]==temp[j])
        j++;
        f[i] = j;
        if(i>=m+1 && f[i] == m) return i-2*m;
    }
    return -1;
}


